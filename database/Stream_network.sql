ALTER TABLE STREAM_NETWORK.ENH_NETWORK DROP CONSTRAINT "ENH_NETWORK_NOM_NETWORK_FK"
;

ALTER TABLE STREAM_NETWORK.ENH_NETWORK DROP CONSTRAINT "ENH_NETWORK_CONTACT_FK"
;

ALTER TABLE STREAM_NETWORK.ENH_NETWORK DROP CONSTRAINT "ENH_NETWORK_NETWORK_AREA_FK"
;

ALTER TABLE STREAM_NETWORK.ENH_REACH DROP CONSTRAINT "ENH_REACH_ENH_NETWORK_FK"
;

ALTER TABLE STREAM_NETWORK.ENH_REACH DROP CONSTRAINT "ENH_REACH_NOM_REACH_FK"
;

ALTER TABLE STREAM_NETWORK.ENH_REACH_ATTRIB DROP CONSTRAINT "ENH_REACH_ATTRIB_ENH_REACH_FK1"
;

ALTER TABLE STREAM_NETWORK.ENH_REACH_GEOM DROP CONSTRAINT "ENH_REACH_GEOM_ENH_REACH_FK"
;

ALTER TABLE STREAM_NETWORK.ENH_REACH_TOPO DROP CONSTRAINT "ENH_REACH_TOPO_ENH_REACH_FK"
;

ALTER TABLE STREAM_NETWORK.NOM_NETWORK DROP CONSTRAINT "NOM_NETWORK_CONTACT_FK"
;

ALTER TABLE STREAM_NETWORK.NOM_NETWORK DROP CONSTRAINT "NOM_NETWORK_NETWORK_AREA_FK"
;

ALTER TABLE STREAM_NETWORK.NOM_NETWORK DROP CONSTRAINT "NOM_NETWORK_NETWORK_TYPE_FK"
;

ALTER TABLE STREAM_NETWORK.NOM_REACH DROP CONSTRAINT "NOM_REACH_NOM_NETWORK_FK"
;

ALTER TABLE STREAM_NETWORK.NOM_REACH_ATTRIB DROP CONSTRAINT "NOM_REACH_ATTRIB_NOM_REACH_FK1"
;

DROP TABLE STREAM_NETWORK.CONTACT CASCADE CONSTRAINTS;

DROP SEQUENCE STREAM_NETWORK.CONTACT_SEQ;

DROP TABLE STREAM_NETWORK.DEBUG CASCADE CONSTRAINTS;

DROP TABLE STREAM_NETWORK.E2RF1_ATTRIBUTES CASCADE CONSTRAINTS;

DROP TABLE STREAM_NETWORK.E2RF1_BASINS CASCADE CONSTRAINTS;

DROP TABLE STREAM_NETWORK.E2RF1_CATCHMENTS CASCADE CONSTRAINTS;

DROP TABLE STREAM_NETWORK.E2RF1_CATCHMENTS_FIXED CASCADE CONSTRAINTS;

DROP TABLE STREAM_NETWORK.ENH_NETWORK CASCADE CONSTRAINTS;

DROP SEQUENCE STREAM_NETWORK.ENH_NETWORK_SEQ;

DROP TABLE STREAM_NETWORK.ENH_REACH CASCADE CONSTRAINTS;

DROP TABLE STREAM_NETWORK.ENH_REACH_ATTRIB CASCADE CONSTRAINTS;

DROP TABLE STREAM_NETWORK.ENH_REACH_GEOM CASCADE CONSTRAINTS;

DROP SEQUENCE STREAM_NETWORK.ENH_REACH_SEQ;

DROP TABLE STREAM_NETWORK.ENH_REACH_TOPO CASCADE CONSTRAINTS;

DROP TABLE STREAM_NETWORK.HUC2_LKP CASCADE CONSTRAINTS;

DROP TABLE STREAM_NETWORK.HUC4_LKP CASCADE CONSTRAINTS;

DROP TABLE STREAM_NETWORK.HUC6_LKP CASCADE CONSTRAINTS;

DROP TABLE STREAM_NETWORK.HUC8_LKP CASCADE CONSTRAINTS;

DROP TABLE STREAM_NETWORK.JB_MRB CASCADE CONSTRAINTS;

DROP TABLE STREAM_NETWORK.JB_MRB_2007_05_24 CASCADE CONSTRAINTS;

DROP SEQUENCE STREAM_NETWORK.MDRS_13C73$;

DROP SEQUENCE STREAM_NETWORK.MDRS_13C7B$;

DROP SEQUENCE STREAM_NETWORK.MDRS_13C84$;

DROP SEQUENCE STREAM_NETWORK.MDRS_13C8D$;

DROP SEQUENCE STREAM_NETWORK.MDRS_DAE9$;

DROP SEQUENCE STREAM_NETWORK.MDRS_DBB3$;

DROP SEQUENCE STREAM_NETWORK.MDRS_DBBF$;

DROP SEQUENCE STREAM_NETWORK.MDRS_DCD6$;

DROP SEQUENCE STREAM_NETWORK.MDRS_DCEB$;

DROP SEQUENCE STREAM_NETWORK.MDRS_DCF3$;

DROP SEQUENCE STREAM_NETWORK.MDRS_DD03$;

DROP SEQUENCE STREAM_NETWORK.MDRS_DD0F$;

DROP SEQUENCE STREAM_NETWORK.MDRS_E074$;

DROP SEQUENCE STREAM_NETWORK.MDRS_E290$;

DROP SEQUENCE STREAM_NETWORK.MDRS_E29C$;

DROP TABLE STREAM_NETWORK.MDRT_13C73$ CASCADE CONSTRAINTS;

DROP TABLE STREAM_NETWORK.MDRT_13C7B$ CASCADE CONSTRAINTS;

DROP TABLE STREAM_NETWORK.MDRT_13C84$ CASCADE CONSTRAINTS;

DROP TABLE STREAM_NETWORK.MDRT_13C8D$ CASCADE CONSTRAINTS;

DROP TABLE STREAM_NETWORK.MDRT_DAE9$ CASCADE CONSTRAINTS;

DROP TABLE STREAM_NETWORK.MDRT_DBB3$ CASCADE CONSTRAINTS;

DROP TABLE STREAM_NETWORK.MDRT_DBBF$ CASCADE CONSTRAINTS;

DROP TABLE STREAM_NETWORK.MDRT_DCD6$ CASCADE CONSTRAINTS;

DROP TABLE STREAM_NETWORK.MDRT_DCEB$ CASCADE CONSTRAINTS;

DROP TABLE STREAM_NETWORK.MDRT_DCF3$ CASCADE CONSTRAINTS;

DROP TABLE STREAM_NETWORK.MDRT_DD03$ CASCADE CONSTRAINTS;

DROP TABLE STREAM_NETWORK.MDRT_DD0F$ CASCADE CONSTRAINTS;

DROP TABLE STREAM_NETWORK.MDRT_E074$ CASCADE CONSTRAINTS;

DROP TABLE STREAM_NETWORK.MDRT_E290$ CASCADE CONSTRAINTS;

DROP TABLE STREAM_NETWORK.MDRT_E29C$ CASCADE CONSTRAINTS;

DROP TABLE STREAM_NETWORK.MY_USER_SDO_GEOM_METADATA CASCADE CONSTRAINTS;

DROP TABLE STREAM_NETWORK.MY_USER_SDO_MAPS CASCADE CONSTRAINTS;

DROP TABLE STREAM_NETWORK.MY_USER_SDO_STYLES CASCADE CONSTRAINTS;

DROP TABLE STREAM_NETWORK.MY_USER_SDO_THEMES CASCADE CONSTRAINTS;

DROP TABLE STREAM_NETWORK.NETWORK_AREA CASCADE CONSTRAINTS;

DROP SEQUENCE STREAM_NETWORK.NETWORK_AREA_SEQ;

DROP TABLE STREAM_NETWORK.NETWORK_TYPE CASCADE CONSTRAINTS;

DROP SEQUENCE STREAM_NETWORK.NETWORK_TYPE_SEQ;

DROP TABLE STREAM_NETWORK.NEW_CATCHMENTS CASCADE CONSTRAINTS;

DROP TABLE STREAM_NETWORK.NEW_CATCHMENTS_COPY CASCADE CONSTRAINTS;

DROP TABLE STREAM_NETWORK.NOM_NETWORK CASCADE CONSTRAINTS;

DROP SEQUENCE STREAM_NETWORK.NOM_NETWORK_SEQ;

DROP TABLE STREAM_NETWORK.NOM_REACH CASCADE CONSTRAINTS;

DROP TABLE STREAM_NETWORK.NOM_REACH_ATTRIB CASCADE CONSTRAINTS;

DROP TABLE STREAM_NETWORK.NOM_REACH_BACKUP CASCADE CONSTRAINTS;

DROP SEQUENCE STREAM_NETWORK.NOM_REACH_SEQ;

DROP TABLE STREAM_NETWORK.RF1_STREAMS CASCADE CONSTRAINTS;

DROP TABLE STREAM_NETWORK.RF1_STREAMS_FIXED CASCADE CONSTRAINTS;

DROP TABLE STREAM_NETWORK.RF1_V_1_2_IMPORT CASCADE CONSTRAINTS;

DROP TABLE STREAM_NETWORK.RF1_V_2_IMPORT CASCADE CONSTRAINTS;

DROP TABLE STREAM_NETWORK.TEMP_GEOM CASCADE CONSTRAINTS;

CREATE OR REPLACE function SQUIRREL_GET_ERROR_OFFSET (query IN varchar2) return number authid current_user is      l_theCursor     integer default dbms_sql.open_cursor;      l_status        integer; begin          begin          dbms_sql.parse(  l_theCursor, query, dbms_sql.native );          exception                  when others then l_status := dbms_sql.last_error_position;          end;          dbms_sql.close_cursor( l_theCursor );          return l_status; end; 

/

CREATE TABLE STREAM_NETWORK.CONTACT
(
CONTACT_ID NUMBER(9, 0) NOT NULL,
FIRST_NAME VARCHAR2(60) NOT NULL,
LAST_NAME VARCHAR2(60) NOT NULL,
PERSON_PHONE VARCHAR2(60),
PERSON_EMAIL VARCHAR2(100),
ORG_NAME VARCHAR2(200) NOT NULL,
ORG_PHONE VARCHAR2(60),
ADDRESS VARCHAR2(400),
ADD_DATE DATE NOT NULL,
UPDATE_DATE DATE
)
;

CREATE TABLE STREAM_NETWORK.DEBUG
(
C1 MDSYS.SDO_GEOMETRY
)
;

CREATE TABLE STREAM_NETWORK.E2RF1_ATTRIBUTES
(
E2RF1 VARCHAR2(20) NOT NULL,
LENGTH BINARY_FLOAT,
HUC VARCHAR2(8),
SEG VARCHAR2(10),
RFLAG VARCHAR2(1),
OWFLAG VARCHAR2(1),
TFLAG VARCHAR2(1),
SFLAG VARCHAR2(1),
TYPE VARCHAR2(1),
SEGL BINARY_FLOAT,
LEV VARCHAR2(10),
PNAME VARCHAR2(30),
OWNAME VARCHAR2(30),
OWNMCD VARCHAR2(11),
RESCODE VARCHAR2(20),
RESVOIR1 VARCHAR2(20),
RESVOIR2 VARCHAR2(20),
RESVOIR3 VARCHAR2(20),
RESVOIR4 VARCHAR2(20),
STAID VARCHAR2(15),
STAID_2 VARCHAR2(15),
PNAME_RES VARCHAR2(30),
PNMCD_RES BINARY_DOUBLE,
MEANQ BINARY_FLOAT,
MEANV BINARY_FLOAT,
FRAC BINARY_FLOAT,
STRAHLER VARCHAR2(20),
STATE1 VARCHAR2(10),
STATE2 VARCHAR2(10),
STATE3 VARCHAR2(10),
RCHTOT BINARY_FLOAT,
RESTOT BINARY_FLOAT,
TERMFLAG VARCHAR2(20),
CONTFLAG VARCHAR2(20),
LRATIO BINARY_FLOAT,
EDACDA VARCHAR2(5),
EDANAME VARCHAR2(50),
HEADFLAG VARCHAR2(10),
DEMIAREA BINARY_FLOAT,
DEMTAREA BINARY_FLOAT,
HYDSEQ VARCHAR2(20),
RR VARCHAR2(11),
HUC2 VARCHAR2(10),
HUC4 VARCHAR2(10),
HUC6 VARCHAR2(20),
STAID1 VARCHAR2(8)
)
;

CREATE TABLE STREAM_NETWORK.E2RF1_BASINS
(
AREA NUMBER,
PERIMETER NUMBER,
ALL_BASINS NUMBER(38, 0),
ALL_BASI_1 NUMBER(38, 0),
GEOM MDSYS.SDO_GEOMETRY
)
;

CREATE TABLE STREAM_NETWORK.E2RF1_CATCHMENTS
(
ID NUMBER(38, 0),
GRIDCODE NUMBER(38, 0),
GEOM MDSYS.SDO_GEOMETRY,
E2RF1 NUMBER(38, 0)
)
;

CREATE TABLE STREAM_NETWORK.E2RF1_CATCHMENTS_FIXED
(
ID NUMBER(38, 0),
GRIDCODE NUMBER(38, 0),
GEOM MDSYS.SDO_GEOMETRY,
E2RF1 NUMBER(38, 0)
)
;

CREATE TABLE STREAM_NETWORK.ENH_NETWORK
(
ENH_NETWORK_ID NUMBER(9, 0) NOT NULL,
NAME VARCHAR2(100) NOT NULL,
MAJOR_REV NUMBER(*, 0) NOT NULL,
MINOR_REV NUMBER(*, 0) NOT NULL,
REV_NAME VARCHAR2(30) NOT NULL,
DESCRIPTION CLOB,
IS_APPROVED CHAR(1) DEFAULT 'F' NOT NULL,
IS_PUBLIC CHAR(1) DEFAULT 'F' NOT NULL,
IS_ARCHIVED CHAR(1) DEFAULT 'F' NOT NULL,
NOM_NETWORK_ID NUMBER(9, 0) NOT NULL,
NETWORK_AREA_ID NUMBER(9, 0) NOT NULL,
CONTACT_ID NUMBER(9, 0) NOT NULL,
URL VARCHAR2(400)
)
;

CREATE TABLE STREAM_NETWORK.ENH_REACH
(
ENH_REACH_ID NUMBER(9, 0) NOT NULL,
ENH_NETWORK_ID NUMBER(9, 0) NOT NULL,
NOM_REACH_ID NUMBER(9, 0),
IDENTIFIER NUMBER(9, 0) NOT NULL,
FULL_IDENTIFIER VARCHAR2(40) NOT NULL,
HYDSEQ NUMBER(9, 0),
FNODE NUMBER(9, 0),
TNODE NUMBER(9, 0),
FRAC NUMBER(10, 9),
REACH_SIZE NUMBER(1, 0) DEFAULT 5,
HEAD_REACH NUMBER(1, 0),
SHORE_REACH NUMBER(1, 0),
TERM_TRANS NUMBER(1, 0),
TERM_ESTUARY NUMBER(1, 0),
TERM_NONCONNECT NUMBER(1, 0)
)
;

CREATE TABLE STREAM_NETWORK.ENH_REACH_ATTRIB
(
ENH_REACH_ID NUMBER(9, 0) NOT NULL,
REACH_NAME VARCHAR2(60),
OPEN_WATER_NAME VARCHAR2(60),
MEANQ NUMBER(10, 4),
MEANV NUMBER(4, 2),
CATCH_AREA NUMBER(9, 3),
CUM_CATCH_AREA NUMBER(10, 3),
REACH_LENGTH NUMBER(7, 0),
HUC2 VARCHAR2(2),
HUC4 VARCHAR2(4),
HUC6 VARCHAR2(6),
HUC8 VARCHAR2(8)
)
;

CREATE TABLE STREAM_NETWORK.ENH_REACH_GEOM
(
ENH_REACH_ID NUMBER(9, 0) NOT NULL,
REACH_GEOM MDSYS.SDO_GEOMETRY,
CATCH_GEOM MDSYS.SDO_GEOMETRY,
WATERSHED_GEOM MDSYS.SDO_GEOMETRY
)
;

CREATE TABLE STREAM_NETWORK.ENH_REACH_TOPO
(
ENH_REACH_ID NUMBER(9, 0) NOT NULL,
FNODE NUMBER(9, 0),
TNODE NUMBER(9, 0),
FRAC FLOAT(126) NOT NULL
)
;

CREATE TABLE STREAM_NETWORK.HUC2_LKP
(
HUC2 VARCHAR2(2) NOT NULL,
NAME VARCHAR2(60),
GEOM MDSYS.SDO_GEOMETRY
)
;

CREATE TABLE STREAM_NETWORK.HUC4_LKP
(
HUC4 VARCHAR2(4) NOT NULL,
NAME VARCHAR2(60),
GEOM MDSYS.SDO_GEOMETRY
)
;

CREATE TABLE STREAM_NETWORK.HUC6_LKP
(
HUC6 VARCHAR2(6) NOT NULL,
NAME VARCHAR2(60),
GEOM MDSYS.SDO_GEOMETRY
)
;

CREATE TABLE STREAM_NETWORK.HUC8_LKP
(
HUC8 VARCHAR2(8) NOT NULL,
NAME VARCHAR2(60),
GEOM MDSYS.SDO_GEOMETRY
)
;

CREATE TABLE STREAM_NETWORK.JB_MRB
(
FNODE_ NUMBER(38, 0),
TNODE_ NUMBER(38, 0),
LPOLY_ NUMBER(38, 0),
RPOLY_ NUMBER(38, 0),
LENGTH NUMBER,
MRB_ERF1_ NUMBER(38, 0),
MRB_ERF1_I NUMBER(38, 0),
HUC VARCHAR2(8),
SEG NUMBER(38, 0),
RFLAG VARCHAR2(1),
OWFLAG VARCHAR2(1),
TFLAG VARCHAR2(1),
SFLAG VARCHAR2(1),
TYPE VARCHAR2(1),
SEGL NUMBER,
LEV NUMBER(38, 0),
PNAME VARCHAR2(30),
OWNAME VARCHAR2(30),
OWNMCD VARCHAR2(11),
RESCODE NUMBER(38, 0),
RESVOIR1 NUMBER(38, 0),
RESVOIR2 NUMBER(38, 0),
RESVOIR3 NUMBER(38, 0),
RESVOIR4 NUMBER(38, 0),
ERF1 NUMBER(38, 0),
E2RF1 NUMBER(38, 0),
STAID VARCHAR2(15),
STAID_2 VARCHAR2(15),
PNAME_RES VARCHAR2(30),
PNMCD_RES NUMBER(38, 0),
MEANQ NUMBER,
MEANV NUMBER,
FRAC NUMBER,
STRAHLER NUMBER(38, 0),
STATE1 NUMBER(38, 0),
STATE2 NUMBER(38, 0),
STATE3 NUMBER(38, 0),
RCHTOT NUMBER,
RESTOT NUMBER,
TERMFLAG NUMBER(38, 0),
CONTFLAG NUMBER(38, 0),
LRATIO NUMBER,
EDACDA VARCHAR2(5),
EDANAME VARCHAR2(50),
HEADFLAG NUMBER(38, 0),
DEMIAREA NUMBER,
DEMTAREA NUMBER,
HYDSEQ NUMBER(38, 0),
MRB_ID NUMBER(38, 0),
STANDARD_I NUMBER(38, 0),
LOCAL_MATC NUMBER(38, 0),
MRB NUMBER(38, 0),
MRB_RCHTOT NUMBER,
RR VARCHAR2(11),
HUC2 NUMBER(38, 0),
HUC4 NUMBER(38, 0),
HUC6 NUMBER(38, 0),
STAID1 VARCHAR2(8),
STAID2 VARCHAR2(7),
SITEID VARCHAR2(8),
GEOMETRY MDSYS.SDO_GEOMETRY
)
;

CREATE TABLE STREAM_NETWORK.JB_MRB_2007_05_24
(
FNODE_ NUMBER(38, 0),
TNODE_ NUMBER(38, 0),
LPOLY_ NUMBER(38, 0),
RPOLY_ NUMBER(38, 0),
LENGTH NUMBER,
MERB_ERF1_ NUMBER(38, 0),
MERB_ERF11 NUMBER(38, 0),
HUC VARCHAR2(8),
SEG NUMBER(38, 0),
RFLAG VARCHAR2(1),
OWFLAG VARCHAR2(1),
TFLAG VARCHAR2(1),
SFLAG VARCHAR2(1),
TYPE VARCHAR2(1),
SEGL NUMBER,
LEV NUMBER(38, 0),
PNAME VARCHAR2(30),
OWNAME VARCHAR2(30),
OWNMCD VARCHAR2(11),
RESCODE NUMBER(38, 0),
RESVOIR1 NUMBER(38, 0),
RESVOIR2 NUMBER(38, 0),
RESVOIR3 NUMBER(38, 0),
RESVOIR4 NUMBER(38, 0),
ERF1 NUMBER(38, 0),
E2RF1 NUMBER(38, 0),
STAID VARCHAR2(15),
STAID_2 VARCHAR2(15),
PNAME_RES VARCHAR2(30),
PNMCD_RES NUMBER(38, 0),
MEANQ NUMBER,
MEANV NUMBER,
FRAC NUMBER,
STRAHLER NUMBER(38, 0),
STATE1 NUMBER(38, 0),
STATE2 NUMBER(38, 0),
STATE3 NUMBER(38, 0),
RCHTOT NUMBER,
RESTOT NUMBER,
TERMFLAG NUMBER(38, 0),
CONTFLAG NUMBER(38, 0),
LRATIO NUMBER,
EDACDA VARCHAR2(5),
EDANAME VARCHAR2(50),
HEADFLAG NUMBER(38, 0),
DEMIAREA NUMBER,
DEMTAREA NUMBER,
HYDSEQ NUMBER(38, 0),
MRB_ID NUMBER(38, 0),
STANDARD_I NUMBER(38, 0),
LOCAL_MATC NUMBER(38, 0),
MRB NUMBER(38, 0),
MRB_RCHTOT NUMBER,
RR VARCHAR2(11),
HUC2 NUMBER(38, 0),
HUC4 NUMBER(38, 0),
HUC6 NUMBER(38, 0),
STAID1 VARCHAR2(8),
STAID2 VARCHAR2(7),
SITEID VARCHAR2(8),
CHAR1 VARCHAR2(1),
CHAR2 VARCHAR2(1),
GEOMETRY MDSYS.SDO_GEOMETRY
)
;

CREATE TABLE STREAM_NETWORK.MDRT_13C73$
(
NODE_ID NUMBER,
NODE_LEVEL NUMBER,
INFO BLOB
)
;

CREATE TABLE STREAM_NETWORK.MDRT_13C7B$
(
NODE_ID NUMBER,
NODE_LEVEL NUMBER,
INFO BLOB
)
;

CREATE TABLE STREAM_NETWORK.MDRT_13C84$
(
NODE_ID NUMBER,
NODE_LEVEL NUMBER,
INFO BLOB
)
;

CREATE TABLE STREAM_NETWORK.MDRT_13C8D$
(
NODE_ID NUMBER,
NODE_LEVEL NUMBER,
INFO BLOB
)
;

CREATE TABLE STREAM_NETWORK.MDRT_DAE9$
(
NODE_ID NUMBER,
NODE_LEVEL NUMBER,
INFO BLOB
)
;

CREATE TABLE STREAM_NETWORK.MDRT_DBB3$
(
NODE_ID NUMBER,
NODE_LEVEL NUMBER,
INFO BLOB
)
;

CREATE TABLE STREAM_NETWORK.MDRT_DBBF$
(
NODE_ID NUMBER,
NODE_LEVEL NUMBER,
INFO BLOB
)
;

CREATE TABLE STREAM_NETWORK.MDRT_DCD6$
(
NODE_ID NUMBER,
NODE_LEVEL NUMBER,
INFO BLOB
)
;

CREATE TABLE STREAM_NETWORK.MDRT_DCEB$
(
NODE_ID NUMBER,
NODE_LEVEL NUMBER,
INFO BLOB
)
;

CREATE TABLE STREAM_NETWORK.MDRT_DCF3$
(
NODE_ID NUMBER,
NODE_LEVEL NUMBER,
INFO BLOB
)
;

CREATE TABLE STREAM_NETWORK.MDRT_DD03$
(
NODE_ID NUMBER,
NODE_LEVEL NUMBER,
INFO BLOB
)
;

CREATE TABLE STREAM_NETWORK.MDRT_DD0F$
(
NODE_ID NUMBER,
NODE_LEVEL NUMBER,
INFO BLOB
)
;

CREATE TABLE STREAM_NETWORK.MDRT_E074$
(
NODE_ID NUMBER,
NODE_LEVEL NUMBER,
INFO BLOB
)
;

CREATE TABLE STREAM_NETWORK.MDRT_E290$
(
NODE_ID NUMBER,
NODE_LEVEL NUMBER,
INFO BLOB
)
;

CREATE TABLE STREAM_NETWORK.MDRT_E29C$
(
NODE_ID NUMBER,
NODE_LEVEL NUMBER,
INFO BLOB
)
;

CREATE TABLE STREAM_NETWORK.MY_USER_SDO_GEOM_METADATA
(
TABLE_NAME VARCHAR2(32),
COLUMN_NAME VARCHAR2(1024),
DIMINFO MDSYS.SDO_DIM_ARRAY,
SRID NUMBER
)
;

CREATE TABLE STREAM_NETWORK.MY_USER_SDO_MAPS
(
NAME VARCHAR2(32) NOT NULL,
DESCRIPTION VARCHAR2(4000),
DEFINITION CLOB
)
;

CREATE TABLE STREAM_NETWORK.MY_USER_SDO_STYLES
(
NAME VARCHAR2(32) NOT NULL,
TYPE VARCHAR2(32) NOT NULL,
DESCRIPTION VARCHAR2(4000),
DEFINITION CLOB,
IMAGE BLOB,
GEOMETRY MDSYS.SDO_GEOMETRY
)
;

CREATE TABLE STREAM_NETWORK.MY_USER_SDO_THEMES
(
NAME VARCHAR2(32) NOT NULL,
DESCRIPTION VARCHAR2(4000),
BASE_TABLE VARCHAR2(32) NOT NULL,
GEOMETRY_COLUMN VARCHAR2(2048) NOT NULL,
STYLING_RULES CLOB
)
;

CREATE TABLE STREAM_NETWORK.NETWORK_AREA
(
NETWORK_AREA_ID NUMBER(9, 0) NOT NULL,
NAME VARCHAR2(40) NOT NULL,
DESCRIPTION CLOB
)
;

CREATE TABLE STREAM_NETWORK.NETWORK_TYPE
(
NETWORK_TYPE_ID NUMBER(9, 0) NOT NULL,
NAME VARCHAR2(40) NOT NULL,
DESCRIPTION CLOB
)
;

CREATE TABLE STREAM_NETWORK.NEW_CATCHMENTS
(
ID NUMBER(38, 0),
GRIDCODE NUMBER(38, 0),
GEOM MDSYS.SDO_GEOMETRY
)
;

CREATE TABLE STREAM_NETWORK.NEW_CATCHMENTS_COPY
(
ID NUMBER(38, 0),
GRIDCODE NUMBER(38, 0),
GEOM MDSYS.SDO_GEOMETRY
)
;

CREATE TABLE STREAM_NETWORK.NOM_NETWORK
(
NOM_NETWORK_ID NUMBER(9, 0) NOT NULL,
NAME VARCHAR2(100) NOT NULL,
MAJOR_REV NUMBER(*, 0) NOT NULL,
MINOR_REV NUMBER(*, 0) NOT NULL,
REV_NAME VARCHAR2(30) NOT NULL,
DESCRIPTION CLOB,
IS_APPROVED CHAR(1) DEFAULT 'F' NOT NULL,
IS_PUBLIC CHAR(1) DEFAULT 'F' NOT NULL,
IS_ARCHIVED CHAR(1) DEFAULT 'F' NOT NULL,
NETWORK_AREA_ID NUMBER(9, 0) NOT NULL,
NETWORK_TYPE_ID NUMBER(9, 0) NOT NULL,
CONTACT_ID NUMBER(9, 0) NOT NULL,
URL VARCHAR2(400)
)
;

CREATE TABLE STREAM_NETWORK.NOM_REACH
(
NOM_REACH_ID NUMBER(9, 0) NOT NULL,
NOM_NETWORK_ID NUMBER(9, 0) NOT NULL,
IDENTIFIER NUMBER(9, 0) NOT NULL,
FULL_IDENTIFIER VARCHAR2(40) NOT NULL,
FNODE NUMBER(9, 0),
TNODE NUMBER(9, 0),
REACH_GEOM MDSYS.SDO_GEOMETRY,
CATCH_GEOM MDSYS.SDO_GEOMETRY,
REACH_SIZE NUMBER(1, 0) DEFAULT 5 NOT NULL,
FRAC NUMBER(10, 9),
HEAD_REACH NUMBER(1, 0),
SHORE_REACH NUMBER(1, 0),
TERM_TRANS NUMBER(1, 0),
TERM_ESTUARY NUMBER(1, 0),
TERM_NONCONNECT NUMBER(1, 0),
HYDSEQ NUMBER(9, 0),
WATERSHED_GEOM MDSYS.SDO_GEOMETRY
)
;

CREATE TABLE STREAM_NETWORK.NOM_REACH_ATTRIB
(
NOM_REACH_ID NUMBER(9, 0) NOT NULL,
REACH_NAME VARCHAR2(60),
OPEN_WATER_NAME VARCHAR2(60),
MEANQ NUMBER(10, 4),
MEANV NUMBER(4, 2),
CATCH_AREA NUMBER(9, 3),
CUM_CATCH_AREA NUMBER(10, 3),
REACH_LENGTH NUMBER(7, 0),
HUC2 VARCHAR2(2),
HUC4 VARCHAR2(4),
HUC6 VARCHAR2(6),
HUC8 VARCHAR2(8)
)
;

CREATE TABLE STREAM_NETWORK.NOM_REACH_BACKUP
(
NOM_REACH_ID NUMBER(9, 0) NOT NULL,
NOM_NETWORK_ID NUMBER(9, 0) NOT NULL,
IDENTIFIER NUMBER(9, 0) NOT NULL,
FULL_IDENTIFIER VARCHAR2(40) NOT NULL,
FNODE NUMBER(7, 0),
TNODE NUMBER(7, 0),
HYDSEQ NUMBER(*, 0) NOT NULL,
REACH_GEOM MDSYS.SDO_GEOMETRY,
CATCH_GEOM MDSYS.SDO_GEOMETRY,
CUM_CATCH_GEOM MDSYS.SDO_GEOMETRY,
FRAC FLOAT(126) NOT NULL
)
;

CREATE TABLE STREAM_NETWORK.RF1_STREAMS
(
FNODE_ NUMBER,
TNODE_ NUMBER,
LPOLY_ NUMBER,
RPOLY_ NUMBER,
LENGTH NUMBER,
RF1TEST_ NUMBER,
RF1TEST_ID NUMBER,
ATR97NEW_M NUMBER,
ATR97NEW_1 NUMBER,
ATR97NEWGT NUMBER,
RF1_WOLOCK_ID NUMBER,
RF1_WOLOCK_PD NUMBER NOT NULL,
GEOM MDSYS.SDO_GEOMETRY,
MEANQ NUMBER,
E2RF1 NUMBER,
PNAME VARCHAR2(30)
)
;

CREATE TABLE STREAM_NETWORK.RF1_STREAMS_FIXED
(
FNODE_ NUMBER,
TNODE_ NUMBER,
LPOLY_ NUMBER,
RPOLY_ NUMBER,
LENGTH NUMBER,
RF1TEST_ NUMBER,
RF1TEST_ID NUMBER,
ATR97NEW_M NUMBER,
ATR97NEW_1 NUMBER,
ATR97NEWGT NUMBER,
RF1_WOLOCK_ID NUMBER,
RF1_WOLOCK_PD NUMBER,
GEOM MDSYS.SDO_GEOMETRY,
MEANQ NUMBER,
E2RF1 NUMBER,
PNAME VARCHAR2(30)
)
;

CREATE TABLE STREAM_NETWORK.RF1_V_1_2_IMPORT
(
FNODE_ NUMBER,
TNODE_ NUMBER,
LPOLY_ NUMBER,
RPOLY_ NUMBER,
LENGTH NUMBER,
ERF1_ NUMBER,
ERF1_ID NUMBER,
HUC NUMBER,
SEG NUMBER,
RFLAG VARCHAR2(1),
OWFLAG VARCHAR2(1),
TFLAG VARCHAR2(1),
SFLAG VARCHAR2(1),
TYPE VARCHAR2(1),
SEGL NUMBER,
LEV NUMBER,
PNAME VARCHAR2(24),
PNMCD VARCHAR2(11),
OWNAME VARCHAR2(13),
OWNMCD VARCHAR2(11),
RESCODE NUMBER,
RESVOIR1 NUMBER,
RESVOIR2 NUMBER,
RESVOIR3 NUMBER,
RESVOIR4 NUMBER,
ERF1__ NUMBER,
E2RF1__ NUMBER,
PNAME_RES VARCHAR2(15),
PNMCD_RES NUMBER,
MEANQ NUMBER,
MEANV NUMBER,
RCHAREA NUMBER,
TOTAREA NUMBER,
STRAHLER NUMBER,
STATE1 NUMBER,
STATE2 NUMBER,
STATE3 NUMBER,
RCHTOT NUMBER,
RESTOT NUMBER,
TERMFLAG NUMBER,
CONTFLAG NUMBER,
LRATIO NUMBER,
EDACDA VARCHAR2(5),
EDANAME VARCHAR2(32),
RR VARCHAR2(11),
HUC2 NUMBER,
HUC4 NUMBER,
HUC6 NUMBER
)
;

CREATE TABLE STREAM_NETWORK.RF1_V_2_IMPORT
(
FNODE NUMBER(5, 0),
TNODE NUMBER(5, 0),
LPOLY NUMBER(5, 0),
RPOLY NUMBER(5, 0),
LENGTH FLOAT(126),
ERF1_2 NUMBER(5, 0),
ERF1_2_ID NUMBER(5, 0),
HUC VARCHAR2(8),
SEG NUMBER(*, 0),
RFLAG VARCHAR2(1),
OWFLAG VARCHAR2(1),
TFLAG VARCHAR2(1),
SFLAG VARCHAR2(1),
TYPE VARCHAR2(1),
SEGL FLOAT(126),
LEV NUMBER(*, 0),
PNAME VARCHAR2(30),
OWNAME VARCHAR2(30),
OWNMCD VARCHAR2(11),
RESCODE NUMBER(5, 0),
RESVOIR1 NUMBER(5, 0),
RESVOIR2 NUMBER(5, 0),
RESVOIR3 NUMBER(5, 0),
RESVOIR4 NUMBER(5, 0),
ERF1 NUMBER(5, 0),
E2RF1 NUMBER(5, 0),
STAID VARCHAR2(15),
STAID_2 VARCHAR2(15),
PNAME_RES VARCHAR2(30),
PNMCD_RES NUMBER(*, 0),
MEANQ FLOAT(126),
MEANV FLOAT(126),
FRAC FLOAT(126),
STRAHLER NUMBER(5, 0),
STATE1 NUMBER(*, 0),
STATE2 NUMBER(*, 0),
STATE3 NUMBER(*, 0),
RCHTOT FLOAT(126),
RESTOT FLOAT(126),
TERMFLAG NUMBER(5, 0),
CONTFLAG NUMBER(5, 0),
LRATIO FLOAT(126),
EDACDA VARCHAR2(5),
EDANAME VARCHAR2(50),
HEADFLAG NUMBER(*, 0),
DEMIAREA FLOAT(126),
DEMTAREA FLOAT(126),
HYDSEQ NUMBER(5, 0),
RR VARCHAR2(11),
HUC2 NUMBER(*, 0),
HUC4 NUMBER(*, 0),
HUC6 NUMBER(*, 0),
STAID1 VARCHAR2(8),
STAID2 VARCHAR2(7),
SITEID VARCHAR2(8)
)
;

CREATE TABLE STREAM_NETWORK.TEMP_GEOM
(
NOM_REACH_ID NUMBER(9, 0) NOT NULL,
WATERSHED_GEOM MDSYS.SDO_GEOMETRY
)
;

ALTER TABLE STREAM_NETWORK.CONTACT
ADD CONSTRAINT CONTACT_PK PRIMARY KEY
(
CONTACT_ID
)
 ENABLE
;

ALTER TABLE STREAM_NETWORK.E2RF1_ATTRIBUTES
ADD PRIMARY KEY
(
E2RF1
)
 ENABLE
;

ALTER TABLE STREAM_NETWORK.E2RF1_CATCHMENTS
ADD CONSTRAINT EC_UK UNIQUE
(
E2RF1
)
 ENABLE
;

ALTER TABLE STREAM_NETWORK.ENH_NETWORK
ADD CONSTRAINT ENH_NETWORK_PK PRIMARY KEY
(
ENH_NETWORK_ID
)
 ENABLE
;

ALTER TABLE STREAM_NETWORK.ENH_NETWORK
ADD CONSTRAINT ENH_NETWORK_UK_REVISION UNIQUE
(
NOM_NETWORK_ID,
NETWORK_AREA_ID,
IS_PUBLIC,
IS_APPROVED,
IS_ARCHIVED,
MAJOR_REV,
MINOR_REV
)
 ENABLE
;

ALTER TABLE STREAM_NETWORK.ENH_REACH
ADD CONSTRAINT ENH_REACH_PK PRIMARY KEY
(
ENH_REACH_ID
)
 ENABLE
;

ALTER TABLE STREAM_NETWORK.ENH_REACH
ADD CONSTRAINT ENH_REACH_UK_IDENTIFIER UNIQUE
(
ENH_NETWORK_ID,
IDENTIFIER
)
 ENABLE
;

ALTER TABLE STREAM_NETWORK.ENH_REACH_ATTRIB
ADD CONSTRAINT ENH_REACH_ATTRIB_PK PRIMARY KEY
(
ENH_REACH_ID
)
 ENABLE
;

ALTER TABLE STREAM_NETWORK.ENH_REACH_GEOM
ADD CONSTRAINT ENH_REACH_GEOM_PK PRIMARY KEY
(
ENH_REACH_ID
)
 ENABLE
;

ALTER TABLE STREAM_NETWORK.ENH_REACH_TOPO
ADD CONSTRAINT ENH_REACH_TOPO_PK PRIMARY KEY
(
ENH_REACH_ID
)
 ENABLE
;

ALTER TABLE STREAM_NETWORK.HUC2_LKP
ADD PRIMARY KEY
(
HUC2
)
 ENABLE
;

ALTER TABLE STREAM_NETWORK.HUC4_LKP
ADD PRIMARY KEY
(
HUC4
)
 ENABLE
;

ALTER TABLE STREAM_NETWORK.HUC6_LKP
ADD PRIMARY KEY
(
HUC6
)
 ENABLE
;

ALTER TABLE STREAM_NETWORK.HUC8_LKP
ADD PRIMARY KEY
(
HUC8
)
 ENABLE
;

ALTER TABLE STREAM_NETWORK.NETWORK_AREA
ADD CONSTRAINT NETWORK_AREA_PK PRIMARY KEY
(
NETWORK_AREA_ID
)
 ENABLE
;

ALTER TABLE STREAM_NETWORK.NETWORK_TYPE
ADD CONSTRAINT NETWORK_TYPE_PK PRIMARY KEY
(
NETWORK_TYPE_ID
)
 ENABLE
;

ALTER TABLE STREAM_NETWORK.NOM_NETWORK
ADD CONSTRAINT NETWORK_PK PRIMARY KEY
(
NOM_NETWORK_ID
)
 ENABLE
;

ALTER TABLE STREAM_NETWORK.NOM_NETWORK
ADD CONSTRAINT NOM_NETWORK_UK_REV UNIQUE
(
NETWORK_AREA_ID,
NETWORK_TYPE_ID,
IS_PUBLIC,
IS_APPROVED,
IS_ARCHIVED,
MAJOR_REV,
MINOR_REV
)
 ENABLE
;

ALTER TABLE STREAM_NETWORK.NOM_REACH
ADD CONSTRAINT REACH_PK PRIMARY KEY
(
NOM_REACH_ID
)
 ENABLE
;

ALTER TABLE STREAM_NETWORK.NOM_REACH
ADD CONSTRAINT NOM_REACH_UK_IDENTIFIER UNIQUE
(
NOM_NETWORK_ID,
IDENTIFIER
)
 ENABLE
;

ALTER TABLE STREAM_NETWORK.NOM_REACH_ATTRIB
ADD CONSTRAINT NOM_REACH_ATTRIB_PK PRIMARY KEY
(
NOM_REACH_ID
)
 ENABLE
;

ALTER TABLE STREAM_NETWORK.RF1_STREAMS
ADD CONSTRAINT RF1_STREAMS_PK PRIMARY KEY
(
RF1_WOLOCK_PD
)
 ENABLE
;

ALTER TABLE STREAM_NETWORK.RF1_STREAMS
ADD CONSTRAINT RF1_E2RF1_UK UNIQUE
(
E2RF1
)
 ENABLE
;

ALTER TABLE STREAM_NETWORK.ENH_NETWORK
ADD CONSTRAINT ENH_NETWORK_NOM_NETWORK_FK FOREIGN KEY
(
NOM_NETWORK_ID
)
REFERENCES STREAM_NETWORK.NOM_NETWORK
(
NOM_NETWORK_ID
) ENABLE
;

ALTER TABLE STREAM_NETWORK.ENH_NETWORK
ADD CONSTRAINT ENH_NETWORK_CONTACT_FK FOREIGN KEY
(
CONTACT_ID
)
REFERENCES STREAM_NETWORK.CONTACT
(
CONTACT_ID
) ENABLE
;

ALTER TABLE STREAM_NETWORK.ENH_NETWORK
ADD CONSTRAINT ENH_NETWORK_NETWORK_AREA_FK FOREIGN KEY
(
NETWORK_AREA_ID
)
REFERENCES STREAM_NETWORK.NETWORK_AREA
(
NETWORK_AREA_ID
) ENABLE
;

ALTER TABLE STREAM_NETWORK.ENH_REACH
ADD CONSTRAINT ENH_REACH_ENH_NETWORK_FK FOREIGN KEY
(
ENH_NETWORK_ID
)
REFERENCES STREAM_NETWORK.ENH_NETWORK
(
ENH_NETWORK_ID
)
ON DELETE CASCADE ENABLE
;

ALTER TABLE STREAM_NETWORK.ENH_REACH
ADD CONSTRAINT ENH_REACH_NOM_REACH_FK FOREIGN KEY
(
NOM_REACH_ID
)
REFERENCES STREAM_NETWORK.NOM_REACH
(
NOM_REACH_ID
) ENABLE
;

ALTER TABLE STREAM_NETWORK.ENH_REACH_ATTRIB
ADD CONSTRAINT ENH_REACH_ATTRIB_ENH_REACH_FK1 FOREIGN KEY
(
ENH_REACH_ID
)
REFERENCES STREAM_NETWORK.ENH_REACH
(
ENH_REACH_ID
)
ON DELETE CASCADE ENABLE
;

ALTER TABLE STREAM_NETWORK.ENH_REACH_GEOM
ADD CONSTRAINT ENH_REACH_GEOM_ENH_REACH_FK FOREIGN KEY
(
ENH_REACH_ID
)
REFERENCES STREAM_NETWORK.ENH_REACH
(
ENH_REACH_ID
)
ON DELETE CASCADE ENABLE
;

ALTER TABLE STREAM_NETWORK.ENH_REACH_TOPO
ADD CONSTRAINT ENH_REACH_TOPO_ENH_REACH_FK FOREIGN KEY
(
ENH_REACH_ID
)
REFERENCES STREAM_NETWORK.ENH_REACH
(
ENH_REACH_ID
)
ON DELETE CASCADE ENABLE
;

ALTER TABLE STREAM_NETWORK.NOM_NETWORK
ADD CONSTRAINT NOM_NETWORK_CONTACT_FK FOREIGN KEY
(
CONTACT_ID
)
REFERENCES STREAM_NETWORK.CONTACT
(
CONTACT_ID
) ENABLE
;

ALTER TABLE STREAM_NETWORK.NOM_NETWORK
ADD CONSTRAINT NOM_NETWORK_NETWORK_AREA_FK FOREIGN KEY
(
NETWORK_AREA_ID
)
REFERENCES STREAM_NETWORK.NETWORK_AREA
(
NETWORK_AREA_ID
) ENABLE
;

ALTER TABLE STREAM_NETWORK.NOM_NETWORK
ADD CONSTRAINT NOM_NETWORK_NETWORK_TYPE_FK FOREIGN KEY
(
NETWORK_TYPE_ID
)
REFERENCES STREAM_NETWORK.NETWORK_TYPE
(
NETWORK_TYPE_ID
) ENABLE
;

ALTER TABLE STREAM_NETWORK.NOM_REACH
ADD CONSTRAINT NOM_REACH_NOM_NETWORK_FK FOREIGN KEY
(
NOM_NETWORK_ID
)
REFERENCES STREAM_NETWORK.NOM_NETWORK
(
NOM_NETWORK_ID
) ENABLE
;

ALTER TABLE STREAM_NETWORK.NOM_REACH_ATTRIB
ADD CONSTRAINT NOM_REACH_ATTRIB_NOM_REACH_FK1 FOREIGN KEY
(
NOM_REACH_ID
)
REFERENCES STREAM_NETWORK.NOM_REACH
(
NOM_REACH_ID
)
ON DELETE CASCADE ENABLE
;

ALTER TABLE STREAM_NETWORK.ENH_NETWORK
ADD CONSTRAINT ENH_NETWORK_CHK_IS_ARC CHECK
(IS_ARCHIVED IN ('T', 'F'))
 ENABLE
;

ALTER TABLE STREAM_NETWORK.ENH_NETWORK
ADD CONSTRAINT ENH_NETWORK_CHK_IS_APP CHECK
(IS_APPROVED IN ('T','F'))
 ENABLE
;

ALTER TABLE STREAM_NETWORK.ENH_NETWORK
ADD CONSTRAINT ENH_NETWORK_CHK_IS_PUBLIC CHECK
(IS_PUBLIC IN ('T', 'F'))
 ENABLE
;

ALTER TABLE STREAM_NETWORK.ENH_REACH
ADD CONSTRAINT ENH_REACH_SHORE_REACH_CHK CHECK
(SHORE_REACH BETWEEN 0 AND 1)
 ENABLE
;

ALTER TABLE STREAM_NETWORK.ENH_REACH
ADD CONSTRAINT ENH_REACH_TERM_TRANS_CHK CHECK
(TERM_TRANS BETWEEN 0 AND 1)
 ENABLE
;

ALTER TABLE STREAM_NETWORK.ENH_REACH
ADD CONSTRAINT ENH_REACH_HEAD_REACH_CHK CHECK
(HEAD_REACH BETWEEN 0 AND 1)
 ENABLE
;

ALTER TABLE STREAM_NETWORK.ENH_REACH
ADD CONSTRAINT ENH_REACH_TERM_NONCONNECT_CHK CHECK
(TERM_NONCONNECT BETWEEN 0 AND 1)
 ENABLE
;

ALTER TABLE STREAM_NETWORK.ENH_REACH
ADD CONSTRAINT ENH_REACH_TERM_ESTUARY_CHK CHECK
(TERM_ESTUARY BETWEEN 0 AND 1)
 ENABLE
;

ALTER TABLE STREAM_NETWORK.ENH_REACH
ADD CONSTRAINT ENH_REACH_REACH_SIZE_CHK CHECK
(REACH_SIZE BETWEEN 1 AND 5)
 ENABLE
;

ALTER TABLE STREAM_NETWORK.NOM_NETWORK
ADD CONSTRAINT NOM_NETWORK_CHK_IS_PUBLIC CHECK
(IS_PUBLIC IN ('T', 'F'))
 ENABLE
;

ALTER TABLE STREAM_NETWORK.NOM_NETWORK
ADD CONSTRAINT NOM_NETWORK_CHK_IS_ARC CHECK
(IS_ARCHIVED IN ('T', 'F'))
 ENABLE
;

ALTER TABLE STREAM_NETWORK.NOM_NETWORK
ADD CONSTRAINT NOM_NETWORK_CHK_IS_APP CHECK
(IS_APPROVED IN ('T','F'))
 ENABLE
;

ALTER TABLE STREAM_NETWORK.NOM_REACH
ADD CONSTRAINT NOM_REACH_REACH_SIZE_CHK CHECK
(REACH_SIZE BETWEEN 1 AND 5)
 ENABLE
;

ALTER TABLE STREAM_NETWORK.NOM_REACH
ADD CONSTRAINT NOM_REACH_HEAD_REACH_CHK CHECK
(HEAD_REACH BETWEEN 0 AND 1)
 ENABLE
;

ALTER TABLE STREAM_NETWORK.NOM_REACH
ADD CONSTRAINT NOM_REACH_TERM_TRANS_CHK CHECK
(TERM_TRANS BETWEEN 0 AND 1)
 ENABLE
;

ALTER TABLE STREAM_NETWORK.NOM_REACH
ADD CONSTRAINT NOM_REACH_SHORE_REACH_CHK CHECK
(SHORE_REACH BETWEEN 0 AND 1)
 ENABLE
;

ALTER TABLE STREAM_NETWORK.NOM_REACH
ADD CONSTRAINT NOM_REACH_TERM_ESTUARY_CHK CHECK
(TERM_ESTUARY BETWEEN 0 AND 1)
 ENABLE
;

ALTER TABLE STREAM_NETWORK.NOM_REACH
ADD CONSTRAINT NOM_REACH_TERM_NONCONNECT_CHK CHECK
(TERM_NONCONNECT BETWEEN 0 AND 1)
 ENABLE
;

CREATE OR REPLACE VIEW STREAM_NETWORK.ENH_ATTRIB_VW AS (
/*
   Selects attribs from ENH_REACH and ENH_REACH_ATTRIB
   for enhanced reaches that have a corresponding row in the ENH_REACH_ATTRIB table.
 */
SELECT
enh.ENH_NETWORK_ID ENH_NETWORK_ID,
enh.ENH_REACH_ID ENH_REACH_ID,
enh.IDENTIFIER IDENTIFIER,
enh.FULL_IDENTIFIER FULL_IDENTIFIER,
enh.HYDSEQ HYDSEQ,
enh.FNODE FNODE,
enh.TNODE TNODE,
enh.FRAC FRAC,
enh.HEAD_REACH HEAD_REACH,
enh.SHORE_REACH SHORE_REACH,
enh.TERM_TRANS TERM_TRANS,
enh.TERM_ESTUARY TERM_ESTUARY,
enh.TERM_NONCONNECT TERM_NONCONNECT,
attrib.REACH_NAME REACH_NAME,
attrib.OPEN_WATER_NAME OPEN_WATER_NAME,
attrib.MEANQ MEANQ,
attrib.MEANV MEANV,
attrib.CATCH_AREA CATCH_AREA,
attrib.CUM_CATCH_AREA CUM_CATCH_AREA,
attrib.REACH_LENGTH REACH_LENGTH,
attrib.HUC2 HUC2,
attrib.HUC4 HUC4,
attrib.HUC6 HUC6,
attrib.HUC8 HUC8
FROM
ENH_REACH enh INNER JOIN ENH_REACH_ATTRIB attrib ON (enh.ENH_REACH_ID = attrib.ENH_REACH_ID)
)
UNION ALL
(
/*
   Selects attribs from ENH_REACH and NOM_REACH_ATTRIB tables.
   For cases where enh'ed reaches have a corresponding row in the NOM_REACH_ATTRIB table
   and do not have a corresponding row in the ENH_REACH_ATTRIB table.
 */
SELECT
enh.ENH_NETWORK_ID ENH_NETWORK_ID,
enh.ENH_REACH_ID ENH_REACH_ID,
enh.IDENTIFIER IDENTIFIER,
enh.FULL_IDENTIFIER FULL_IDENTIFIER,
enh.HYDSEQ HYDSEQ,
enh.FNODE FNODE,
enh.TNODE TNODE,
enh.FRAC FRAC,
enh.HEAD_REACH HEAD_REACH,
enh.SHORE_REACH SHORE_REACH,
enh.TERM_TRANS TERM_TRANS,
enh.TERM_ESTUARY TERM_ESTUARY,
enh.TERM_NONCONNECT TERM_NONCONNECT,
attrib.REACH_NAME REACH_NAME,
attrib.OPEN_WATER_NAME OPEN_WATER_NAME,
attrib.MEANQ MEANQ,
attrib.MEANV MEANV,
attrib.CATCH_AREA CATCH_AREA,
attrib.CUM_CATCH_AREA CUM_CATCH_AREA,
attrib.REACH_LENGTH REACH_LENGTH,
attrib.HUC2 HUC2,
attrib.HUC4 HUC4,
attrib.HUC6 HUC6,
attrib.HUC8 HUC8
FROM
ENH_REACH enh INNER JOIN NOM_REACH_ATTRIB attrib ON (enh.NOM_REACH_ID = attrib.NOM_REACH_ID)
WHERE
NOT EXISTS (SELECT ENH_REACH_ID FROM ENH_REACH_ATTRIB enhattrib WHERE enhattrib.ENH_REACH_ID = enh.ENH_REACH_ID)
)
UNION ALL
(
/*
   Selects attribs from ENH_REACH only, setting values normally found in the
   XXX_ATTRIB tables to null.
   Applies to cases where an enh'ed reach has no corresponding row in
   NOM_REACH_ATTRIB (reach is added at the enh level, or just no attribs for it)
     and does not have a row in ENH_REACH_ATTRIB.
     This is a degenerate case:  The attribs are not provided at the enh'ed or nom
     level and are basically missing.
 */
SELECT
enh.ENH_NETWORK_ID ENH_NETWORK_ID,
enh.ENH_REACH_ID ENH_REACH_ID,
enh.IDENTIFIER IDENTIFIER,
enh.FULL_IDENTIFIER FULL_IDENTIFIER,
enh.HYDSEQ HYDSEQ,
enh.FNODE FNODE,
enh.TNODE TNODE,
enh.FRAC FRAC,
enh.HEAD_REACH HEAD_REACH,
enh.SHORE_REACH SHORE_REACH,
enh.TERM_TRANS TERM_TRANS,
enh.TERM_ESTUARY TERM_ESTUARY,
enh.TERM_NONCONNECT TERM_NONCONNECT,
null REACH_NAME,
null OPEN_WATER_NAME,
null MEANQ,
null MEANV,
null CATCH_AREA,
null CUM_CATCH_AREA,
null REACH_LENGTH,
null HUC2,
null HUC4,
null HUC6,
null HUC8
FROM
ENH_REACH enh
WHERE
NOT EXISTS (SELECT NOM_REACH_ID FROM NOM_REACH_ATTRIB nomattrib WHERE nomattrib.NOM_REACH_ID = enh.NOM_REACH_ID) AND
NOT EXISTS (SELECT ENH_REACH_ID FROM ENH_REACH_ATTRIB enhattrib WHERE enhattrib.ENH_REACH_ID = enh.ENH_REACH_ID)
);

CREATE OR REPLACE VIEW STREAM_NETWORK.ENH_GEOM_VW AS SELECT
/*
Note:  Reaches which contain no geometry and are not related to a nominal reach are not returned.
*/
  ENH_NETWORK_ID, ENH_REACH_ID, IDENTIFIER, REACH_GEOM, CATCH_GEOM, WATERSHED_GEOM, REACH_SIZE
FROM (
(
/*
The first query returns reaches which have no geometry at the enhanced level (no entry in ENH_REACH_GEOM),
but do inherit geometry from the nominal level (entry in NOM_REACH).  It is possible, however, that the
geometry in NOM_REACH may be null.
*/
  SELECT
    enh.ENH_NETWORK_ID ENH_NETWORK_ID,
    enh.ENH_REACH_ID ENH_REACH_ID,
    enh.IDENTIFIER IDENTIFIER,
    nom.REACH_GEOM REACH_GEOM,
    nom.CATCH_GEOM CATCH_GEOM,
    nom.WATERSHED_GEOM WATERSHED_GEOM,
    enh.REACH_SIZE REACH_SIZE
  FROM
    ENH_REACH enh INNER JOIN NOM_REACH nom ON (enh.NOM_REACH_ID = nom.NOM_REACH_ID)
  WHERE
    enh.ENH_REACH_ID NOT IN (SELECT ENH_REACH_ID FROM ENH_REACH_GEOM)
)
UNION ALL    
(
/*
The second query returns reaches which have geometry at the enhanced level (an entry in ENH_REACH_GEOM)
*/
  SELECT
    enh.ENH_NETWORK_ID, enh.ENH_REACH_ID ENH_REACH_ID, IDENTIFIER, REACH_GEOM, CATCH_GEOM, WATERSHED_GEOM, REACH_SIZE
  FROM
    ENH_REACH enh INNER JOIN ENH_REACH_GEOM geo ON (enh.ENH_REACH_ID = geo.ENH_REACH_ID)
)
);

/* ERROR ORA-02327: cannot create index on expression with datatype ADT
The generation of the script is incorrect. These must be spatial indexes.

CREATE INDEX STREAM_NETWORK.E2RF1_BASINSMB_IDX ON STREAM_NETWORK.E2RF1_BASINS (GEOM ASC);

CREATE INDEX STREAM_NETWORK.E2RF1_CATCHMENTSMB_IDX ON STREAM_NETWORK.E2RF1_CATCHMENTS (GEOM ASC);

CREATE INDEX STREAM_NETWORK.E2RF1_CATCH_FIXED_GEOM_I ON STREAM_NETWORK.E2RF1_CATCHMENTS_FIXED (GEOM ASC);

CREATE INDEX STREAM_NETWORK.NOM_REACH_REACH_GEOM_I ON STREAM_NETWORK.NOM_REACH (REACH_GEOM ASC);

CREATE INDEX STREAM_NETWORK.RF1_STREAMS_SP_IDX ON STREAM_NETWORK.RF1_STREAMS (GEOM ASC);


*/

CREATE INDEX STREAM_NETWORK.E2RF1_CATCH_FIXED_I ON STREAM_NETWORK.E2RF1_CATCHMENTS_FIXED (GRIDCODE ASC);

CREATE INDEX STREAM_NETWORK.ENH_NETWORK_NOM_NETWORK_FK_I ON STREAM_NETWORK.ENH_NETWORK (NOM_NETWORK_ID ASC);

CREATE INDEX STREAM_NETWORK.ENH_NETWORK_NETWORK_AREA_FK_I ON STREAM_NETWORK.ENH_NETWORK (NETWORK_AREA_ID ASC);

CREATE INDEX STREAM_NETWORK.ENH_REACH_REACH_SIZE_I ON STREAM_NETWORK.ENH_REACH (REACH_SIZE ASC);

CREATE INDEX STREAM_NETWORK.ENH_REACH_NOM_REACH_FK_I ON STREAM_NETWORK.ENH_REACH (NOM_REACH_ID ASC);

CREATE INDEX STREAM_NETWORK.ENH_REACH_TERM_NONCONNECT_I ON STREAM_NETWORK.ENH_REACH (TERM_NONCONNECT ASC);

CREATE INDEX STREAM_NETWORK.ENH_REACH_ENH_NETWORK_FK_I ON STREAM_NETWORK.ENH_REACH (ENH_NETWORK_ID ASC);

CREATE INDEX STREAM_NETWORK.ENH_REACH_TERM_TRANS_I ON STREAM_NETWORK.ENH_REACH (TERM_TRANS ASC);

CREATE INDEX STREAM_NETWORK.ENH_REACH_HEAD_I ON STREAM_NETWORK.ENH_REACH (HEAD_REACH ASC);

CREATE INDEX STREAM_NETWORK.ENH_REACH_FNODE_I ON STREAM_NETWORK.ENH_REACH (FNODE ASC);

CREATE INDEX STREAM_NETWORK.ENH_REACH_SHORE_REACH_I ON STREAM_NETWORK.ENH_REACH (SHORE_REACH ASC);

CREATE INDEX STREAM_NETWORK.ENH_REACH_HYDSEQ_I ON STREAM_NETWORK.ENH_REACH (HYDSEQ ASC);

CREATE INDEX STREAM_NETWORK.ENH_REACH_TNODE_I ON STREAM_NETWORK.ENH_REACH (TNODE ASC);

CREATE INDEX STREAM_NETWORK.ENH_REACH_TERM_ESTUARY_I ON STREAM_NETWORK.ENH_REACH (TERM_ESTUARY ASC);

CREATE INDEX STREAM_NETWORK.ENH_REACH_ATTRIB_REACH_NAME_I ON STREAM_NETWORK.ENH_REACH_ATTRIB (REACH_NAME ASC);

CREATE INDEX STREAM_NETWORK.ENH_REACH_ATTRIB_OW_NAME_I ON STREAM_NETWORK.ENH_REACH_ATTRIB (OPEN_WATER_NAME ASC);

CREATE INDEX STREAM_NETWORK.ENH_REACH_CATCH_GEOM_I ON STREAM_NETWORK.ENH_REACH_GEOM (CATCH_GEOM ASC);

CREATE INDEX STREAM_NETWORK.ENH_REACH_REACH_GEOM_I ON STREAM_NETWORK.ENH_REACH_GEOM (REACH_GEOM ASC);

CREATE INDEX STREAM_NETWORK.HUC2_LKP_SP_IDX ON STREAM_NETWORK.HUC2_LKP (GEOM ASC);

CREATE INDEX STREAM_NETWORK.HUC4_LKP_SP_IDX ON STREAM_NETWORK.HUC4_LKP (GEOM ASC);

CREATE INDEX STREAM_NETWORK.HUC6_LKP_SP_IDX ON STREAM_NETWORK.HUC6_LKP (GEOM ASC);

CREATE INDEX STREAM_NETWORK.HUC8_LKP_SP_IDX ON STREAM_NETWORK.HUC8_LKP (GEOM ASC);

CREATE INDEX STREAM_NETWORK.JB_MRBMB_IDX ON STREAM_NETWORK.JB_MRB (GEOMETRY ASC);

CREATE INDEX STREAM_NETWORK.JB_MRB_2007_05_24MB_IDX ON STREAM_NETWORK.JB_MRB_2007_05_24 (GEOMETRY ASC);

CREATE INDEX STREAM_NETWORK.NEW_CATCHMENTSMB_IDX ON STREAM_NETWORK.NEW_CATCHMENTS (GEOM ASC);

CREATE INDEX STREAM_NETWORK.NEW_CATCHMENTS_UK ON STREAM_NETWORK.NEW_CATCHMENTS (ID ASC);

CREATE INDEX STREAM_NETWORK.NOM_REACH_TERM_NONCONNECT_I ON STREAM_NETWORK.NOM_REACH (TERM_NONCONNECT ASC);

CREATE INDEX STREAM_NETWORK.NOM_REACH_FULL_ID_I ON STREAM_NETWORK.NOM_REACH (FULL_IDENTIFIER ASC);

CREATE INDEX STREAM_NETWORK.NOM_REACH_REACH_SIZE_I ON STREAM_NETWORK.NOM_REACH (REACH_SIZE ASC);

CREATE INDEX STREAM_NETWORK.NOM_REACH_SHORE_REACH_I ON STREAM_NETWORK.NOM_REACH (SHORE_REACH ASC);

CREATE INDEX STREAM_NETWORK.NOM_REACH_TERM_TRANS_I ON STREAM_NETWORK.NOM_REACH (TERM_TRANS ASC);

CREATE INDEX STREAM_NETWORK.NOM_REACH_TNODE_I ON STREAM_NETWORK.NOM_REACH (TNODE ASC);

CREATE INDEX STREAM_NETWORK.NOM_REACH_NOM_NETWORK_FK_INDEX ON STREAM_NETWORK.NOM_REACH (NOM_NETWORK_ID ASC);

CREATE INDEX STREAM_NETWORK.NOM_REACH_TERM_ESTUARY_I ON STREAM_NETWORK.NOM_REACH (TERM_ESTUARY ASC);

CREATE INDEX STREAM_NETWORK.NOM_REACH_FNODE_I ON STREAM_NETWORK.NOM_REACH (FNODE ASC);

CREATE INDEX STREAM_NETWORK.NOM_REACH_HEAD_REACH_I ON STREAM_NETWORK.NOM_REACH (HEAD_REACH ASC);

CREATE INDEX STREAM_NETWORK.NOM_REACH_CATCH_GEOM_I ON STREAM_NETWORK.NOM_REACH (CATCH_GEOM ASC);

CREATE INDEX STREAM_NETWORK.NOM_REACH_IDENTIFIER_I ON STREAM_NETWORK.NOM_REACH (IDENTIFIER ASC);

CREATE INDEX STREAM_NETWORK.NOM_REACH_ATTRIB_HUC4_BI ON STREAM_NETWORK.NOM_REACH_ATTRIB (HUC4 ASC);

CREATE INDEX STREAM_NETWORK.NOM_REACH_ATTRIB_HUC8_BI ON STREAM_NETWORK.NOM_REACH_ATTRIB (HUC8 ASC);

CREATE INDEX STREAM_NETWORK.NOM_REACH_ATTRIB_HUC6_BI ON STREAM_NETWORK.NOM_REACH_ATTRIB (HUC6 ASC);

CREATE INDEX STREAM_NETWORK.NOM_REACH_ATTRIB_OW_NAME_I ON STREAM_NETWORK.NOM_REACH_ATTRIB (OPEN_WATER_NAME ASC);

CREATE INDEX STREAM_NETWORK.NOM_REACH_ATTRIB_REACH_NAME_I ON STREAM_NETWORK.NOM_REACH_ATTRIB (REACH_NAME ASC);

CREATE INDEX STREAM_NETWORK.NOM_REACH_ATTRIB_MEANQ_I ON STREAM_NETWORK.NOM_REACH_ATTRIB (MEANQ ASC);

CREATE INDEX STREAM_NETWORK.NOM_REACH_ATTRIB_HUC2_BI ON STREAM_NETWORK.NOM_REACH_ATTRIB (HUC2 ASC);

CREATE INDEX STREAM_NETWORK.NOM_REACH_ATTRIB_MEANV_I ON STREAM_NETWORK.NOM_REACH_ATTRIB (MEANV ASC);

CREATE INDEX STREAM_NETWORK.FNODE_IDX ON STREAM_NETWORK.RF1_STREAMS (FNODE_ ASC);

CREATE INDEX STREAM_NETWORK.MEANQ_I ON STREAM_NETWORK.RF1_STREAMS (MEANQ ASC);

CREATE INDEX STREAM_NETWORK.TNODE_IDX ON STREAM_NETWORK.RF1_STREAMS (TNODE_ ASC);

CREATE INDEX STREAM_NETWORK.RF1_V_2_IMPORT_E2RF1_I ON STREAM_NETWORK.RF1_V_2_IMPORT (E2RF1 ASC);

CREATE INDEX STREAM_NETWORK.RF1_V_2_IMPORT_ERF1_I ON STREAM_NETWORK.RF1_V_2_IMPORT (ERF1 ASC);

CREATE SEQUENCE STREAM_NETWORK.CONTACT_SEQ INCREMENT BY 1 MAXVALUE 999999999999999999999999999 MINVALUE 1 CACHE 20 ORDER ;

CREATE SEQUENCE STREAM_NETWORK.ENH_NETWORK_SEQ INCREMENT BY 1 MAXVALUE 999999999999999999999999999 MINVALUE 1 CACHE 20 ORDER ;

CREATE SEQUENCE STREAM_NETWORK.ENH_REACH_SEQ INCREMENT BY 1 MAXVALUE 999999999999999999999999999 MINVALUE 1 CACHE 20 ORDER ;

CREATE SEQUENCE STREAM_NETWORK.MDRS_13C73$ INCREMENT BY 1 MAXVALUE 999999999999999999999999999 MINVALUE 1 CACHE 100 ORDER ;

CREATE SEQUENCE STREAM_NETWORK.MDRS_13C7B$ INCREMENT BY 1 MAXVALUE 999999999999999999999999999 MINVALUE 1 CACHE 100 ORDER ;

CREATE SEQUENCE STREAM_NETWORK.MDRS_13C84$ INCREMENT BY 1 MAXVALUE 999999999999999999999999999 MINVALUE 1 CACHE 100 ORDER ;

CREATE SEQUENCE STREAM_NETWORK.MDRS_13C8D$ INCREMENT BY 1 MAXVALUE 999999999999999999999999999 MINVALUE 1 CACHE 100 ORDER ;

CREATE SEQUENCE STREAM_NETWORK.MDRS_DAE9$ INCREMENT BY 1 MAXVALUE 999999999999999999999999999 MINVALUE 1 CACHE 100 ORDER ;

CREATE SEQUENCE STREAM_NETWORK.MDRS_DBB3$ INCREMENT BY 1 MAXVALUE 999999999999999999999999999 MINVALUE 1 CACHE 100 ORDER ;

CREATE SEQUENCE STREAM_NETWORK.MDRS_DBBF$ INCREMENT BY 1 MAXVALUE 999999999999999999999999999 MINVALUE 1 CACHE 100 ORDER ;

CREATE SEQUENCE STREAM_NETWORK.MDRS_DCD6$ INCREMENT BY 1 MAXVALUE 999999999999999999999999999 MINVALUE 1 CACHE 100 ORDER ;

CREATE SEQUENCE STREAM_NETWORK.MDRS_DCEB$ INCREMENT BY 1 MAXVALUE 999999999999999999999999999 MINVALUE 1 CACHE 100 ORDER ;

CREATE SEQUENCE STREAM_NETWORK.MDRS_DCF3$ INCREMENT BY 1 MAXVALUE 999999999999999999999999999 MINVALUE 1 CACHE 100 ORDER ;

CREATE SEQUENCE STREAM_NETWORK.MDRS_DD03$ INCREMENT BY 1 MAXVALUE 999999999999999999999999999 MINVALUE 1 CACHE 100 ORDER ;

CREATE SEQUENCE STREAM_NETWORK.MDRS_DD0F$ INCREMENT BY 1 MAXVALUE 999999999999999999999999999 MINVALUE 1 CACHE 100 ORDER ;

CREATE SEQUENCE STREAM_NETWORK.MDRS_E074$ INCREMENT BY 1 MAXVALUE 999999999999999999999999999 MINVALUE 1 CACHE 100 ORDER ;

CREATE SEQUENCE STREAM_NETWORK.MDRS_E290$ INCREMENT BY 1 MAXVALUE 999999999999999999999999999 MINVALUE 1 CACHE 100 ORDER ;

CREATE SEQUENCE STREAM_NETWORK.MDRS_E29C$ INCREMENT BY 1 MAXVALUE 999999999999999999999999999 MINVALUE 1 CACHE 100 ORDER ;

CREATE SEQUENCE STREAM_NETWORK.NETWORK_AREA_SEQ INCREMENT BY 1 MAXVALUE 999999999999999999999999999 MINVALUE 1 CACHE 20 ORDER ;

CREATE SEQUENCE STREAM_NETWORK.NETWORK_TYPE_SEQ INCREMENT BY 1 MAXVALUE 999999999999999999999999999 MINVALUE 1 CACHE 20 ORDER ;

CREATE SEQUENCE STREAM_NETWORK.NOM_NETWORK_SEQ INCREMENT BY 1 MAXVALUE 999999999999999999999999999 MINVALUE 1 CACHE 20 ORDER ;

CREATE SEQUENCE STREAM_NETWORK.NOM_REACH_SEQ INCREMENT BY 1 MAXVALUE 999999999999999999999999999 MINVALUE 1 CACHE 20 ORDER ;

COMMENT ON COLUMN STREAM_NETWORK.ENH_REACH.HYDSEQ IS 'Moving down stream gives a larger HYDSEQ value.  Thus, the smallest values are headwater reaches.  If a reach is not a transport reach (i.e. a shore_reach), this can be null.'
;

COMMENT ON COLUMN STREAM_NETWORK.ENH_REACH.FRAC IS 'For reaches exiting a confluence, this is the fraction of the flow entering this reach.  For a single reach, the fraction should be 1, for two reaches equally split, the FRAC value for each would be .5.  For non-transport reaches (i.e. shoreline reaches), this can be null.'
;

COMMENT ON COLUMN STREAM_NETWORK.ENH_REACH.REACH_SIZE IS 'An arbitrary indicator of at what scale a reach should be shown on a map:  5:  National, 4: Regional, 3: State, 2 Multi-County, 1: County.'
;

COMMENT ON COLUMN STREAM_NETWORK.ENH_REACH.HEAD_REACH IS 'Flag: 1 == Head reach (no upstream reach).  0 == Non-head reach.  Null if unknown.'
;

COMMENT ON COLUMN STREAM_NETWORK.ENH_REACH.SHORE_REACH IS 'Flag: 1 == Shoreline reach, 0 == Non-Shoreline Reach.  Null if unknown.'
;

COMMENT ON COLUMN STREAM_NETWORK.ENH_REACH.TERM_TRANS IS 'Flag: 1 == A Standard transport reach that does does not terminate.  0 == Terminal reach that ends as ''TERM_ESTUARY'' or ''TERM_NON_CONNECT'', or is a ''SHORE_REACH''.   Null if unknown.'
;

COMMENT ON COLUMN STREAM_NETWORK.ENH_REACH.TERM_ESTUARY IS 'Flag: 1 == A terminal reach that ends in an ocean or lake.  0 == Non-estuary reach.   Null if unknown.'
;

COMMENT ON COLUMN STREAM_NETWORK.ENH_REACH.TERM_NONCONNECT IS 'Flag: 1 == A terminal reach that ends b/c it is not connected to a lower reach, but does not end in an ocean or lake.  0 == This is not a non-connected reach.   Null if unknown.'
;

COMMENT ON COLUMN STREAM_NETWORK.ENH_REACH_ATTRIB.REACH_NAME IS 'The primary name for the reach'
;

COMMENT ON COLUMN STREAM_NETWORK.ENH_REACH_ATTRIB.OPEN_WATER_NAME IS 'The primary name for any associated open water, such as a lake or pond.'
;

COMMENT ON COLUMN STREAM_NETWORK.ENH_REACH_ATTRIB.MEANQ IS 'Mean Flow in Cubic Feet / Second'
;

COMMENT ON COLUMN STREAM_NETWORK.ENH_REACH_ATTRIB.MEANV IS 'Velocity corresponding to mean streamflow for reach, in feet per second'
;

COMMENT ON COLUMN STREAM_NETWORK.ENH_REACH_ATTRIB.CATCH_AREA IS 'Incremental drainage area for a given reach, in square kilometers'
;

COMMENT ON COLUMN STREAM_NETWORK.ENH_REACH_ATTRIB.CUM_CATCH_AREA IS 'Cumulative drainage area for a given reach, in square kilometers'
;

COMMENT ON COLUMN STREAM_NETWORK.ENH_REACH_ATTRIB.REACH_LENGTH IS 'Reach length in meters'
;

COMMENT ON COLUMN STREAM_NETWORK.ENH_REACH_GEOM.REACH_GEOM IS 'The geometry for the stream reach.'
;

COMMENT ON COLUMN STREAM_NETWORK.ENH_REACH_GEOM.CATCH_GEOM IS 'The geometry for the catchment of the reach.'
;

COMMENT ON COLUMN STREAM_NETWORK.ENH_REACH_TOPO.FNODE IS 'Can be null b/c there may not be an upstream reach.'
;

COMMENT ON COLUMN STREAM_NETWORK.ENH_REACH_TOPO.TNODE IS 'Can be null b/c there may not be a downstream reach.'
;

COMMENT ON COLUMN STREAM_NETWORK.NOM_REACH.FNODE IS 'Can be null b/c there may not be an upstream reach.'
;

COMMENT ON COLUMN STREAM_NETWORK.NOM_REACH.TNODE IS 'Can be null b/c there may not be a downstream reach.'
;

COMMENT ON COLUMN STREAM_NETWORK.NOM_REACH.REACH_GEOM IS 'The geometry for the stream reach.'
;

COMMENT ON COLUMN STREAM_NETWORK.NOM_REACH.CATCH_GEOM IS 'The geometry for the catchment of the reach.'
;

COMMENT ON COLUMN STREAM_NETWORK.NOM_REACH.REACH_SIZE IS 'An arbitrary indicator of at what scale a reach should be shown on a map:  5:  National, 4: Regional, 3: State, 2 Multi-County, 1: County.'
;

COMMENT ON COLUMN STREAM_NETWORK.NOM_REACH.FRAC IS 'For reaches exiting a confluence, this is the fraction of the flow entering this reach.  For a single reach, the fraction should be 1, for two reaches equally split, the FRAC value for each would be .5.  For non-transport reaches (i.e. shoreline reaches), this can be null.'
;

COMMENT ON COLUMN STREAM_NETWORK.NOM_REACH.HEAD_REACH IS 'Flag: 1 == Head reach (no upstream reach).  0 == Non-head reach.  Null if unknown.'
;

COMMENT ON COLUMN STREAM_NETWORK.NOM_REACH.SHORE_REACH IS 'Flag: 1 == Shoreline reach, 0 == Non-Shoreline Reach.  Null if unknown.'
;

COMMENT ON COLUMN STREAM_NETWORK.NOM_REACH.TERM_TRANS IS 'Flag: 1 == A Standard transport reach that does does not terminate.  0 == Terminal reach that ends as ''TERM_ESTUARY'' or ''TERM_NON_CONNECT'', or is a ''SHORE_REACH''.   Null if unknown.'
;

COMMENT ON COLUMN STREAM_NETWORK.NOM_REACH.TERM_ESTUARY IS 'Flag: 1 == A terminal reach that ends in an ocean or lake.  0 == Non-estuary reach.   Null if unknown.'
;

COMMENT ON COLUMN STREAM_NETWORK.NOM_REACH.TERM_NONCONNECT IS 'Flag: 1 == A terminal reach that ends b/c it is not connected to a lower reach, but does not end in an ocean or lake.  0 == This is not a non-connected reach.   Null if unknown.'
;

COMMENT ON COLUMN STREAM_NETWORK.NOM_REACH.HYDSEQ IS 'Moving down stream gives a larger HYDSEQ value.  Thus, the smallest values are headwater reaches.  If a reach is not a transport reach (i.e. a shore_reach), this can be null.'
;

