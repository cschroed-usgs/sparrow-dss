#
# This file was intended to be used once as a 'one shot' to replace the dbf joiner.
# It will create the join to the appropriate river network as a view in Postgres
# based off the dbf file or model output. This may also prove useful when loading new models into
# Postgres and eventually importing into Geoserver. Create the view that joins the 
# dbf file to the appropriate river network which will later be exposed as a layer in Geoserver.
# Catchments have a geometry of MultiPolygon.
#
#Example final SQL: 
#CREATE OR REPLACE VIEW sparrow_overlay."catchment-22n1220785281" AS 
# SELECT dbf.identifier as "IDENTIFIER",
#    dbf.value as "VALUE",
#    net.gid,
#    net.source, //not always present on shape file
#    net.geom ::geometry(MultiPolygon, 4326) As geom
#   FROM sparrow_overlay.model_22n1220785281 dbf,
#    sparrow_overlay.national_mrb_e2rf1_catch net  //lookup table value before query either <riverNetwork>_catch or _flow
#  WHERE dbf.identifier = net.identifier;
#   
# net.geom ::geometry(MultiPolygon, 4326) for catch  or net.geom ::geometry(MultiLineString, 4326) for flow
# Parms : VIEW_LAYER_NAME, GEOMTYPE, RIVER_NETWORK_TABLE_NAME, DBF_ID
CreateView = \
CREATE OR REPLACE VIEW sparrow_overlay.@VIEW_LAYER_NAME@ AS \
SELECT dbf.identifier AS "IDENTIFIER", \
    dbf.value AS "VALUE", \
    net.gid, \
    @GEOMTYPE@ AS geom \
   FROM sparrow_overlay.model_output dbf, \
    sparrow_overlay.@RIVER_NETWORK_TABLE_NAME@ net \
 WHERE dbf.identifier = net.identifier \
AND dbf.model_output_id = @DBF_ID@; 
#
# Inserts the dbf data into a single table, model_output
#Parms: $MODEL_NBR$, $IDENTIFIER$, $VALUE$, $MODEL_OUTPUT_ID$, $LAST_UPDATE$
InsertModelOutputRow = \
INSERT INTO sparrow_overlay.model_output(model_nbr, identifier, value, model_output_id, last_update) \
VALUES ($MODEL_NBR$, $IDENTIFIER$, $VALUE$, $MODEL_OUTPUT_ID$, $LAST_UPDATE$);
#
#
# Used to initially load the database after all the dbf files 
GetAllModelOutputIdsWithoutView = \
SELECT UNIQUE dbf.model_output_id \
FROM sparrow_overlay.model_output_id dbf \
WHERE ...probably a left outer join instead of NOT EXISTS (SELECT dbf_id from all_views where view name like $DBF_ID$);
#
# Parm: $MODEL_NBR$
# Gets the table name needed to join and create the layer
GetTableNames = \
SELECT reg.catch_table_name, reg.flow_table_name \
FROM sparrow_overlay.region reg, \
sparrow_overlay.model_to_region mod \
WHERE reg.region_id = mod.model_region \
AND mod.model_nbr = $MODEL_NBR$;
#

# This file was intended to be used once as a 'one shot' to replace the dbf joiner.
# It will create the join to the appropriate river network as a view in Postgres
# based off the dbf file or model output. This may also prove useful when loading new models into
# Postgres and eventually importing into Geoserver. Create the view that joins the 
# dbf file to the appropriate river network which will later be exposed as a layer in Geoserver.
# Flows have a geometry of MultiLineString.
#
#Example final SQL: 
#CREATE OR REPLACE VIEW sparrow_overlay."flow-22n1220785281" AS 
# SELECT dbf.identifier as "IDENTIFIER",
#    dbf.value as "VALUE",
#    net.gid,
#    net.source,
#    net.geom::geometry(MultiLineString,4326)
#   FROM sparrow_overlay.model_22n1220785281 dbf,
#    sparrow_overlay.national_mrb_e2rf1_flow net //lookup table value ETL_PARAMETERS in the SPARROW_DSS schema <Oracle>
#  WHERE dbf.identifier = net.identifier;
# delete this - probably can manage with a single query see CreateView above
# # Parms : VIEW_LAYER_NAME, DBF_TABLE_NAME, RIVER_NETWORK_NAME

