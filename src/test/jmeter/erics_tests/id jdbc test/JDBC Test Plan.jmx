<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="2.1">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath">D:\JMeterSparrow\jakarta-jmeter-2.4\src\jmeter_jdbc_test\ojdbc6.jar</stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">39</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1288214086000</longProp>
        <longProp name="ThreadGroup.end_time">1288214086000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
          <boolProp name="autocommit">true</boolProp>
          <stringProp name="checkQuery">Select 1 from dual</stringProp>
          <stringProp name="connectionAge">5000</stringProp>
          <stringProp name="dataSource">conn</stringProp>
          <stringProp name="dbUrl">jdbc:oracle:thin:@130.11.165.154:1521:widw</stringProp>
          <stringProp name="driver">oracle.jdbc.OracleDriver</stringProp>
          <boolProp name="keepAlive">true</boolProp>
          <stringProp name="password">***REMOVED***</stringProp>
          <stringProp name="poolMax">0</stringProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <stringProp name="username">sparrow_dss</stringProp>
        </JDBCDataSource>
        <hashTree/>
        <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Wiggle" enabled="true">
          <stringProp name="maximumValue">1000</stringProp>
          <stringProp name="minimumValue">-1000</stringProp>
          <stringProp name="outputFormat"></stringProp>
          <boolProp name="perThread">false</boolProp>
          <stringProp name="randomSeed"></stringProp>
          <stringProp name="variableName">wiggle</stringProp>
        </RandomVariableConfig>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Warmup query" enabled="true">
          <stringProp name="TestPlan.comments">Ensures that the time to create a connection is not included in the query time</stringProp>
        </GenericController>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Get Model ID" enabled="true">
            <stringProp name="dataSource">conn</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select sparrow_model_id, status from sparrow_model where sparrow_model_id = 22</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Load Geom Queries" enabled="false"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Reach from Materialized" enabled="false">
            <stringProp name="dataSource">conn</stringProp>
            <stringProp name="query">SELECT MODEL_REACH_ID, REACH_GEOM, &apos;V.NONE_LINES_0_800K&apos;, null, &apos;null&apos;, -1, &apos;rule#0&apos;, IDENTIFIER FROM MODEL_GEOM_VW WHERE &apos;s&apos;=&apos;s&apos;  AND (SPARROW_MODEL_ID = ${modelId})</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Catch from Materialized" enabled="false">
            <stringProp name="dataSource">conn</stringProp>
            <stringProp name="query">SELECT MODEL_REACH_ID, CATCH_GEOM, &apos;V.NONE_LINES_0_800K&apos;, null, &apos;null&apos;, -1, &apos;rule#0&apos;, IDENTIFIER FROM MODEL_GEOM_VW WHERE &apos;s&apos;=&apos;s&apos;  AND (SPARROW_MODEL_ID = ${modelId})</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Reach from Old" enabled="false">
            <stringProp name="dataSource">conn</stringProp>
            <stringProp name="query">SELECT MODEL_REACH_ID, REACH_GEOM, &apos;V.NONE_LINES_0_800K&apos;, null, &apos;null&apos;, -1, &apos;rule#0&apos;, IDENTIFIER FROM MODEL_GEOM_VW_OLD WHERE &apos;s&apos;=&apos;s&apos;  AND (SPARROW_MODEL_ID = ${modelId})</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Catch from Old" enabled="false">
            <stringProp name="dataSource">conn</stringProp>
            <stringProp name="query">SELECT MODEL_REACH_ID, CATCH_GEOM, &apos;V.NONE_LINES_0_800K&apos;, null, &apos;null&apos;, -1, &apos;rule#0&apos;, IDENTIFIER FROM MODEL_GEOM_VW_OLD WHERE &apos;s&apos;=&apos;s&apos;  AND (SPARROW_MODEL_ID = ${modelId})</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Reach from Model View" enabled="false">
            <stringProp name="dataSource">conn</stringProp>
            <stringProp name="query">SELECT MODEL_REACH_ID, REACH_GEOM, &apos;V.NONE_LINES_0_800K&apos;, null, &apos;null&apos;, -1, &apos;rule#0&apos;, IDENTIFIER FROM MODEL_GEOM_${modelId}_VW WHERE &apos;s&apos;=&apos;s&apos;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Catch from Model View" enabled="false">
            <stringProp name="dataSource">conn</stringProp>
            <stringProp name="query">SELECT MODEL_REACH_ID, CATCH_GEOM, &apos;V.NONE_LINES_0_800K&apos;, null, &apos;null&apos;, -1, &apos;rule#0&apos;, IDENTIFIER FROM MODEL_GEOM_${modelId}_VW WHERE &apos;s&apos;=&apos;s&apos;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <ResultCollector guiclass="StatGraphVisualizer" testclass="ResultCollector" testname="Aggregate Graph" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>false</code>
                <message>false</message>
                <threadName>false</threadName>
                <dataType>false</dataType>
                <encoding>false</encoding>
                <assertions>false</assertions>
                <subresults>false</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>false</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
          <ResultCollector guiclass="TableVisualizer" testclass="ResultCollector" testname="View Results in Table" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>false</code>
                <message>false</message>
                <threadName>true</threadName>
                <dataType>false</dataType>
                <encoding>false</encoding>
                <assertions>false</assertions>
                <subresults>false</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>false</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
              </value>
            </objProp>
            <stringProp name="filename">D:\JMeterSparrow\jakarta-jmeter-2.4\src\jmeter_jdbc_test\Results\raw_geom_results.csv</stringProp>
          </ResultCollector>
          <hashTree/>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
            <stringProp name="filename">geom_model_numbers.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames">modelId</stringProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">Current thread</stringProp>
          </CSVDataSet>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ID Point Queries" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Reach from Materialized" enabled="false">
            <stringProp name="dataSource">conn</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">SELECT * FROM (
	SELECT  identifier,
		round(SDO_GEOM.SDO_DISTANCE(REACH_GEOM, sdo_geometry(2001, 8307, 
			sdo_point_type(${long} + (.002 * ${wiggle}), ${lat} + (.002 * ${wiggle}), NULL), NULL, NULL),1)) dist_in_meters
	FROM MODEL_GEOM_VW
	WHERE  sparrow_model_id = ${modelId} AND
	SDO_FILTER(REACH_GEOM, SDO_GEOMETRY(2003, 8307, NULL, SDO_ELEM_INFO_ARRAY(1,1003,3), 
		SDO_ORDINATE_ARRAY(${long} - .5 + (.002 * ${wiggle}), ${lat} -.5 + (.002 * ${wiggle}), ${long} + .5 + (.002 * ${wiggle}), ${lat} + .5 + (.002 * ${wiggle})))) = &apos;TRUE&apos;
	ORDER BY Dist_In_Meters ) inner
WHERE rownum &lt; 2</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Catch from Materialized" enabled="false">
            <stringProp name="dataSource">conn</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">SELECT * FROM (
	SELECT  identifier,
		round(SDO_GEOM.SDO_DISTANCE(CATCH_GEOM, sdo_geometry(2001, 8307, 
			sdo_point_type(${long} + (.002 * ${wiggle}), ${lat} + (.002 * ${wiggle}), NULL), NULL, NULL),1)) dist_in_meters
	FROM MODEL_GEOM_VW
	WHERE  sparrow_model_id = ${modelId} AND
	SDO_FILTER(CATCH_GEOM, SDO_GEOMETRY(2003, 8307, NULL, SDO_ELEM_INFO_ARRAY(1,1003,3), 
		SDO_ORDINATE_ARRAY(${long} - .5 + (.002 * ${wiggle}), ${lat} -.5 + (.002 * ${wiggle}), ${long} + .5 + (.002 * ${wiggle}), ${lat} + .5 + (.002 * ${wiggle})))) = &apos;TRUE&apos;
	ORDER BY Dist_In_Meters ) inner
WHERE rownum &lt; 2</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Reach from Old" enabled="false">
            <stringProp name="dataSource">conn</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">SELECT * FROM (
	SELECT  identifier,
		round(SDO_GEOM.SDO_DISTANCE(REACH_GEOM, sdo_geometry(2001, 8307, 
			sdo_point_type(${long} + (.002 * ${wiggle}), ${lat} + (.002 * ${wiggle}), NULL), NULL, NULL),1)) dist_in_meters
	FROM MODEL_GEOM_VW_OLD
	WHERE  sparrow_model_id = ${modelId} AND
	SDO_FILTER(REACH_GEOM, SDO_GEOMETRY(2003, 8307, NULL, SDO_ELEM_INFO_ARRAY(1,1003,3), 
		SDO_ORDINATE_ARRAY(${long} - .5 + (.002 * ${wiggle}), ${lat} -.5 + (.002 * ${wiggle}), ${long} + .5 + (.002 * ${wiggle}), ${lat} + .5 + (.002 * ${wiggle})))) = &apos;TRUE&apos;
	ORDER BY Dist_In_Meters ) inner
WHERE rownum &lt; 2</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Catch from Old" enabled="false">
            <stringProp name="dataSource">conn</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">SELECT * FROM (
	SELECT  identifier,
		round(SDO_GEOM.SDO_DISTANCE(CATCH_GEOM, sdo_geometry(2001, 8307, 
			sdo_point_type(${long} + (.002 * ${wiggle}), ${lat} + (.002 * ${wiggle}), NULL), NULL, NULL),1)) dist_in_meters
	FROM MODEL_GEOM_VW_OLD
	WHERE  sparrow_model_id = ${modelId} AND
	SDO_FILTER(CATCH_GEOM, SDO_GEOMETRY(2003, 8307, NULL, SDO_ELEM_INFO_ARRAY(1,1003,3), 
		SDO_ORDINATE_ARRAY(${long} - .5 + (.002 * ${wiggle}), ${lat} -.5 + (.002 * ${wiggle}), ${long} + .5 + (.002 * ${wiggle}), ${lat} + .5 + (.002 * ${wiggle})))) = &apos;TRUE&apos;
	ORDER BY Dist_In_Meters ) inner
WHERE rownum &lt; 2</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Reach from Model View" enabled="false">
            <stringProp name="dataSource">conn</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">SELECT * FROM (
	SELECT  identifier,
		round(SDO_GEOM.SDO_DISTANCE(REACH_GEOM, sdo_geometry(2001, 8307, 
			sdo_point_type(${long} + (.002 * ${wiggle}), ${lat} + (.002 * ${wiggle}), NULL), NULL, NULL),1)) dist_in_meters
	FROM MODEL_GEOM_${modelId}_VW
	WHERE
	SDO_FILTER(REACH_GEOM, SDO_GEOMETRY(2003, 8307, NULL, SDO_ELEM_INFO_ARRAY(1,1003,3), 
		SDO_ORDINATE_ARRAY(${long} - .5 + (.002 * ${wiggle}), ${lat} -.5 + (.002 * ${wiggle}), ${long} + .5 + (.002 * ${wiggle}), ${lat} + .5 + (.002 * ${wiggle})))) = &apos;TRUE&apos;
	ORDER BY Dist_In_Meters ) inner
WHERE rownum &lt; 2</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Catch from Model View" enabled="false">
            <stringProp name="dataSource">conn</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">SELECT * FROM (
	SELECT  identifier,
		round(SDO_GEOM.SDO_DISTANCE(CATCH_GEOM, sdo_geometry(2001, 8307, 
			sdo_point_type(${long} + (.002 * ${wiggle}), ${lat} + (.002 * ${wiggle}), NULL), NULL, NULL),1)) dist_in_meters
	FROM MODEL_GEOM_${modelId}_VW
	WHERE
	SDO_FILTER(CATCH_GEOM, SDO_GEOMETRY(2003, 8307, NULL, SDO_ELEM_INFO_ARRAY(1,1003,3), 
		SDO_ORDINATE_ARRAY(${long} - .5 + (.002 * ${wiggle}), ${lat} -.5 + (.002 * ${wiggle}), ${long} + .5 + (.002 * ${wiggle}), ${lat} + .5 + (.002 * ${wiggle})))) = &apos;TRUE&apos;
	ORDER BY Dist_In_Meters ) inner
WHERE rownum &lt; 2</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Reach from Materialized Hint" enabled="true">
            <stringProp name="dataSource">conn</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">SELECT /*+ FIRST_ROWS(2) */ * FROM (
	SELECT  identifier,
		round(SDO_GEOM.SDO_DISTANCE(REACH_GEOM, sdo_geometry(2001, 8307, 
			sdo_point_type(${long} + (.002 * ${wiggle}), ${lat} + (.002 * ${wiggle}), NULL), NULL, NULL),1)) dist_in_meters
	FROM MODEL_GEOM_VW
	WHERE  sparrow_model_id = ${modelId} AND
	SDO_FILTER(REACH_GEOM, SDO_GEOMETRY(2003, 8307, NULL, SDO_ELEM_INFO_ARRAY(1,1003,3), 
		SDO_ORDINATE_ARRAY(${long} - .5 + (.002 * ${wiggle}), ${lat} -.5 + (.002 * ${wiggle}), ${long} + .5 + (.002 * ${wiggle}), ${lat} + .5 + (.002 * ${wiggle})))) = &apos;TRUE&apos;
	ORDER BY Dist_In_Meters ) inner
WHERE rownum &lt; 2</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Catch from Materialized Hint" enabled="false">
            <stringProp name="dataSource">conn</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">SELECT /*+ FIRST_ROWS(2) */ * FROM (
	SELECT  identifier,
		round(SDO_GEOM.SDO_DISTANCE(CATCH_GEOM, sdo_geometry(2001, 8307, 
			sdo_point_type(${long} + (.002 * ${wiggle}), ${lat} + (.002 * ${wiggle}), NULL), NULL, NULL),1)) dist_in_meters
	FROM MODEL_GEOM_VW
	WHERE  sparrow_model_id = ${modelId} AND
	SDO_FILTER(CATCH_GEOM, SDO_GEOMETRY(2003, 8307, NULL, SDO_ELEM_INFO_ARRAY(1,1003,3), 
		SDO_ORDINATE_ARRAY(${long} - .5 + (.002 * ${wiggle}), ${lat} -.5 + (.002 * ${wiggle}), ${long} + .5 + (.002 * ${wiggle}), ${lat} + .5 + (.002 * ${wiggle})))) = &apos;TRUE&apos;
	ORDER BY Dist_In_Meters ) inner
WHERE rownum &lt; 2</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Reach from Old Hint" enabled="false">
            <stringProp name="dataSource">conn</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">SELECT /*+ FIRST_ROWS(2) */ * FROM (
	SELECT  identifier,
		round(SDO_GEOM.SDO_DISTANCE(REACH_GEOM, sdo_geometry(2001, 8307, 
			sdo_point_type(${long} + (.002 * ${wiggle}), ${lat} + (.002 * ${wiggle}), NULL), NULL, NULL),1)) dist_in_meters
	FROM MODEL_GEOM_VW_OLD
	WHERE  sparrow_model_id = ${modelId} AND
	SDO_FILTER(REACH_GEOM, SDO_GEOMETRY(2003, 8307, NULL, SDO_ELEM_INFO_ARRAY(1,1003,3), 
		SDO_ORDINATE_ARRAY(${long} - .5 + (.002 * ${wiggle}), ${lat} -.5 + (.002 * ${wiggle}), ${long} + .5 + (.002 * ${wiggle}), ${lat} + .5 + (.002 * ${wiggle})))) = &apos;TRUE&apos;
	ORDER BY Dist_In_Meters ) inner
WHERE rownum &lt; 2</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Catch from Old Hint" enabled="false">
            <stringProp name="dataSource">conn</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">SELECT /*+ FIRST_ROWS(2) */ * FROM (
	SELECT  identifier,
		round(SDO_GEOM.SDO_DISTANCE(CATCH_GEOM, sdo_geometry(2001, 8307, 
			sdo_point_type(${long} + (.002 * ${wiggle}), ${lat} + (.002 * ${wiggle}), NULL), NULL, NULL),1)) dist_in_meters
	FROM MODEL_GEOM_VW_OLD
	WHERE  sparrow_model_id = ${modelId} AND
	SDO_FILTER(CATCH_GEOM, SDO_GEOMETRY(2003, 8307, NULL, SDO_ELEM_INFO_ARRAY(1,1003,3), 
		SDO_ORDINATE_ARRAY(${long} - .5 + (.002 * ${wiggle}), ${lat} -.5 + (.002 * ${wiggle}), ${long} + .5 + (.002 * ${wiggle}), ${lat} + .5 + (.002 * ${wiggle})))) = &apos;TRUE&apos;
	ORDER BY Dist_In_Meters ) inner
WHERE rownum &lt; 2</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Reach from Model View Hint" enabled="true">
            <stringProp name="dataSource">conn</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">SELECT /*+ FIRST_ROWS(2) */ * FROM (
	SELECT  identifier,
		round(SDO_GEOM.SDO_DISTANCE(REACH_GEOM, sdo_geometry(2001, 8307, 
			sdo_point_type(${long} + (.002 * ${wiggle}), ${lat} + (.002 * ${wiggle}), NULL), NULL, NULL),1)) dist_in_meters
	FROM MODEL_GEOM_${modelId}_VW
	WHERE
	SDO_FILTER(REACH_GEOM, SDO_GEOMETRY(2003, 8307, NULL, SDO_ELEM_INFO_ARRAY(1,1003,3), 
		SDO_ORDINATE_ARRAY(${long} - .5 + (.002 * ${wiggle}), ${lat} -.5 + (.002 * ${wiggle}), ${long} + .5 + (.002 * ${wiggle}), ${lat} + .5 + (.002 * ${wiggle})))) = &apos;TRUE&apos;
	ORDER BY Dist_In_Meters ) inner
WHERE rownum &lt; 2</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Catch from Model View Hint" enabled="false">
            <stringProp name="dataSource">conn</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">SELECT /*+ FIRST_ROWS(2) */ * FROM (
	SELECT  identifier,
		round(SDO_GEOM.SDO_DISTANCE(CATCH_GEOM, sdo_geometry(2001, 8307, 
			sdo_point_type(${long} + (.002 * ${wiggle}), ${lat} + (.002 * ${wiggle}), NULL), NULL, NULL),1)) dist_in_meters
	FROM MODEL_GEOM_${modelId}_VW
	WHERE
	SDO_FILTER(CATCH_GEOM, SDO_GEOMETRY(2003, 8307, NULL, SDO_ELEM_INFO_ARRAY(1,1003,3), 
		SDO_ORDINATE_ARRAY(${long} - .5 + (.002 * ${wiggle}), ${lat} -.5 + (.002 * ${wiggle}), ${long} + .5 + (.002 * ${wiggle}), ${lat} + .5 + (.002 * ${wiggle})))) = &apos;TRUE&apos;
	ORDER BY Dist_In_Meters ) inner
WHERE rownum &lt; 2</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
            <stringProp name="filename">id_model_numbers.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames">modelId,lat,long</stringProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">Current thread</stringProp>
          </CSVDataSet>
          <hashTree/>
          <ResultCollector guiclass="StatGraphVisualizer" testclass="ResultCollector" testname="Aggregate Graph" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>false</code>
                <message>false</message>
                <threadName>false</threadName>
                <dataType>false</dataType>
                <encoding>false</encoding>
                <assertions>false</assertions>
                <subresults>false</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>false</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
          <ResultCollector guiclass="TableVisualizer" testclass="ResultCollector" testname="View Results in Table" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>false</code>
                <message>false</message>
                <threadName>true</threadName>
                <dataType>false</dataType>
                <encoding>false</encoding>
                <assertions>false</assertions>
                <subresults>false</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>false</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
              </value>
            </objProp>
            <stringProp name="filename">D:\JMeterSparrow\jakarta-jmeter-2.4\src\jmeter_jdbc_test\Results\raw_id_results_bitmap5.csv</stringProp>
          </ResultCollector>
          <hashTree/>
          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>true</xml>
                <fieldNames>false</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
        </hashTree>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
