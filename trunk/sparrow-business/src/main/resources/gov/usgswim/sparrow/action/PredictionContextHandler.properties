#These queries are based on this table schema:
#CREATE TABLE GENERIC_CACHE (
#	KEY decimal(10) NOT NULL,
#	VALUE_CLASS varchar2(100) NOT NULL,
#	VALUE blob,
#	LAST_TOUCHED timestamp NOT NULL
#);
#CREATE UNIQUE INDEX GENERIC_CACHE_UK ON GENERIC_CACHE(VALUE_CLASS, KEY);
#CREATE INDEX GENERIC_CACHE_LAST_TOUCHED ON GENERIC_CACHE(LAST_TOUCHED);


Insert = \
INSERT INTO GENERIC_CACHE ( \
	KEY, \
	VALUE_CLASS, \
	VALUE, \
	LAST_TOUCHED) \
VALUES ( \
	$KEY$, \
	$VALUE_CLASS$, \
	$VALUE$, \
	$LAST_TOUCHED$)

Touch = \
UPDATE GENERIC_CACHE \
SET LAST_TOUCHED = $LAST_TOUCHED$ \
WHERE KEY = $KEY$ AND VALUE_CLASS = $VALUE_CLASS$
	

#This Callable statement invokes a procedure that looks something like the one
#below.  It is intended to keep the LAST_TOUCHED timestamp up to date w/o
#requiring a separate db call.
#
#procedure GENERIC_CACHE_BY_CLS_AND_CODE (
#  key_in in number,
#  value_class_in in varchar,
#  return_cursor out types.ref_cursor
#  )
#as begin
#  update generic_cache
#     set last_touched = sysdate
#   where key = key_in;
#
#  commit;
#
#  open return_cursor for
#    select KEY, VALUE_CLASS, VALUE, LAST_TOUCHED from SPARROW_DSS.GENERIC_CACHE
#    where key = key_in
#      and VALUE_CLASS = value_class_in;
#end GENERIC_CACHE_BY_CLS_AND_CODE; 
SelectOne = begin GENERIC_CACHE_BY_CLS_AND_CODE(?, ?, ?); end;

SelectSinceTime = \
SELECT \
	KEY, \
	VALUE_CLASS, \
	VALUE, \
	LAST_TOUCHED \
FROM GENERIC_CACHE \
WHERE LAST_TOUCHED > $LAST_TOUCHED$ AND VALUE_CLASS = $VALUE_CLASS$
